
Usage_Example_CM4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000138  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002e84  08000138  08000138  00010138  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e4  08002fbc  08002fbc  00012fbc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080030a0  080030a0  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  080030a0  080030a0  000130a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080030a8  080030a8  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080030a8  080030a8  000130a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080030ac  080030ac  000130ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080030b0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000b4  2000000c  080030bc  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000c0  080030bc  000200c0  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e78a  00000000  00000000  00020036  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001f61  00000000  00000000  0002e7c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ee0  00000000  00000000  00030728  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000e38  00000000  00000000  00031608  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001b2dd  00000000  00000000  00032440  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d889  00000000  00000000  0004d71d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ac75c  00000000  00000000  0005afa6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00107702  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003d78  00000000  00000000  00107754  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000138 <__do_global_dtors_aux>:
 8000138:	b510      	push	{r4, lr}
 800013a:	4c05      	ldr	r4, [pc, #20]	; (8000150 <__do_global_dtors_aux+0x18>)
 800013c:	7823      	ldrb	r3, [r4, #0]
 800013e:	b933      	cbnz	r3, 800014e <__do_global_dtors_aux+0x16>
 8000140:	4b04      	ldr	r3, [pc, #16]	; (8000154 <__do_global_dtors_aux+0x1c>)
 8000142:	b113      	cbz	r3, 800014a <__do_global_dtors_aux+0x12>
 8000144:	4804      	ldr	r0, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x20>)
 8000146:	f3af 8000 	nop.w
 800014a:	2301      	movs	r3, #1
 800014c:	7023      	strb	r3, [r4, #0]
 800014e:	bd10      	pop	{r4, pc}
 8000150:	2000000c 	.word	0x2000000c
 8000154:	00000000 	.word	0x00000000
 8000158:	08002fa4 	.word	0x08002fa4

0800015c <frame_dummy>:
 800015c:	b508      	push	{r3, lr}
 800015e:	4b03      	ldr	r3, [pc, #12]	; (800016c <frame_dummy+0x10>)
 8000160:	b11b      	cbz	r3, 800016a <frame_dummy+0xe>
 8000162:	4903      	ldr	r1, [pc, #12]	; (8000170 <frame_dummy+0x14>)
 8000164:	4803      	ldr	r0, [pc, #12]	; (8000174 <frame_dummy+0x18>)
 8000166:	f3af 8000 	nop.w
 800016a:	bd08      	pop	{r3, pc}
 800016c:	00000000 	.word	0x00000000
 8000170:	20000010 	.word	0x20000010
 8000174:	08002fa4 	.word	0x08002fa4

08000178 <__aeabi_uldivmod>:
 8000178:	b953      	cbnz	r3, 8000190 <__aeabi_uldivmod+0x18>
 800017a:	b94a      	cbnz	r2, 8000190 <__aeabi_uldivmod+0x18>
 800017c:	2900      	cmp	r1, #0
 800017e:	bf08      	it	eq
 8000180:	2800      	cmpeq	r0, #0
 8000182:	bf1c      	itt	ne
 8000184:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000188:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 800018c:	f000 b974 	b.w	8000478 <__aeabi_idiv0>
 8000190:	f1ad 0c08 	sub.w	ip, sp, #8
 8000194:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000198:	f000 f806 	bl	80001a8 <__udivmoddi4>
 800019c:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001a0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001a4:	b004      	add	sp, #16
 80001a6:	4770      	bx	lr

080001a8 <__udivmoddi4>:
 80001a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001ac:	9e08      	ldr	r6, [sp, #32]
 80001ae:	460d      	mov	r5, r1
 80001b0:	4604      	mov	r4, r0
 80001b2:	4688      	mov	r8, r1
 80001b4:	2b00      	cmp	r3, #0
 80001b6:	d14d      	bne.n	8000254 <__udivmoddi4+0xac>
 80001b8:	428a      	cmp	r2, r1
 80001ba:	4694      	mov	ip, r2
 80001bc:	d968      	bls.n	8000290 <__udivmoddi4+0xe8>
 80001be:	fab2 f282 	clz	r2, r2
 80001c2:	b152      	cbz	r2, 80001da <__udivmoddi4+0x32>
 80001c4:	fa01 f302 	lsl.w	r3, r1, r2
 80001c8:	f1c2 0120 	rsb	r1, r2, #32
 80001cc:	fa20 f101 	lsr.w	r1, r0, r1
 80001d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80001d4:	ea41 0803 	orr.w	r8, r1, r3
 80001d8:	4094      	lsls	r4, r2
 80001da:	ea4f 451c 	mov.w	r5, ip, lsr #16
 80001de:	0c21      	lsrs	r1, r4, #16
 80001e0:	fbb8 fef5 	udiv	lr, r8, r5
 80001e4:	fa1f f78c 	uxth.w	r7, ip
 80001e8:	fb05 831e 	mls	r3, r5, lr, r8
 80001ec:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80001f0:	fb0e f107 	mul.w	r1, lr, r7
 80001f4:	4299      	cmp	r1, r3
 80001f6:	d90b      	bls.n	8000210 <__udivmoddi4+0x68>
 80001f8:	eb1c 0303 	adds.w	r3, ip, r3
 80001fc:	f10e 30ff 	add.w	r0, lr, #4294967295	; 0xffffffff
 8000200:	f080 811e 	bcs.w	8000440 <__udivmoddi4+0x298>
 8000204:	4299      	cmp	r1, r3
 8000206:	f240 811b 	bls.w	8000440 <__udivmoddi4+0x298>
 800020a:	f1ae 0e02 	sub.w	lr, lr, #2
 800020e:	4463      	add	r3, ip
 8000210:	1a5b      	subs	r3, r3, r1
 8000212:	b2a4      	uxth	r4, r4
 8000214:	fbb3 f0f5 	udiv	r0, r3, r5
 8000218:	fb05 3310 	mls	r3, r5, r0, r3
 800021c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000220:	fb00 f707 	mul.w	r7, r0, r7
 8000224:	42a7      	cmp	r7, r4
 8000226:	d90a      	bls.n	800023e <__udivmoddi4+0x96>
 8000228:	eb1c 0404 	adds.w	r4, ip, r4
 800022c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000230:	f080 8108 	bcs.w	8000444 <__udivmoddi4+0x29c>
 8000234:	42a7      	cmp	r7, r4
 8000236:	f240 8105 	bls.w	8000444 <__udivmoddi4+0x29c>
 800023a:	4464      	add	r4, ip
 800023c:	3802      	subs	r0, #2
 800023e:	1be4      	subs	r4, r4, r7
 8000240:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
 8000244:	2100      	movs	r1, #0
 8000246:	b11e      	cbz	r6, 8000250 <__udivmoddi4+0xa8>
 8000248:	40d4      	lsrs	r4, r2
 800024a:	2300      	movs	r3, #0
 800024c:	e9c6 4300 	strd	r4, r3, [r6]
 8000250:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000254:	428b      	cmp	r3, r1
 8000256:	d908      	bls.n	800026a <__udivmoddi4+0xc2>
 8000258:	2e00      	cmp	r6, #0
 800025a:	f000 80ee 	beq.w	800043a <__udivmoddi4+0x292>
 800025e:	2100      	movs	r1, #0
 8000260:	e9c6 0500 	strd	r0, r5, [r6]
 8000264:	4608      	mov	r0, r1
 8000266:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800026a:	fab3 f183 	clz	r1, r3
 800026e:	2900      	cmp	r1, #0
 8000270:	d14a      	bne.n	8000308 <__udivmoddi4+0x160>
 8000272:	42ab      	cmp	r3, r5
 8000274:	d302      	bcc.n	800027c <__udivmoddi4+0xd4>
 8000276:	4282      	cmp	r2, r0
 8000278:	f200 80f9 	bhi.w	800046e <__udivmoddi4+0x2c6>
 800027c:	1a84      	subs	r4, r0, r2
 800027e:	eb65 0303 	sbc.w	r3, r5, r3
 8000282:	2001      	movs	r0, #1
 8000284:	4698      	mov	r8, r3
 8000286:	2e00      	cmp	r6, #0
 8000288:	d0e2      	beq.n	8000250 <__udivmoddi4+0xa8>
 800028a:	e9c6 4800 	strd	r4, r8, [r6]
 800028e:	e7df      	b.n	8000250 <__udivmoddi4+0xa8>
 8000290:	b902      	cbnz	r2, 8000294 <__udivmoddi4+0xec>
 8000292:	deff      	udf	#255	; 0xff
 8000294:	fab2 f282 	clz	r2, r2
 8000298:	2a00      	cmp	r2, #0
 800029a:	f040 8091 	bne.w	80003c0 <__udivmoddi4+0x218>
 800029e:	eba1 050c 	sub.w	r5, r1, ip
 80002a2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002a6:	fa1f fe8c 	uxth.w	lr, ip
 80002aa:	2101      	movs	r1, #1
 80002ac:	fbb5 f3f7 	udiv	r3, r5, r7
 80002b0:	fb07 5013 	mls	r0, r7, r3, r5
 80002b4:	0c25      	lsrs	r5, r4, #16
 80002b6:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 80002ba:	fb0e f003 	mul.w	r0, lr, r3
 80002be:	42a8      	cmp	r0, r5
 80002c0:	d908      	bls.n	80002d4 <__udivmoddi4+0x12c>
 80002c2:	eb1c 0505 	adds.w	r5, ip, r5
 80002c6:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 80002ca:	d202      	bcs.n	80002d2 <__udivmoddi4+0x12a>
 80002cc:	42a8      	cmp	r0, r5
 80002ce:	f200 80cb 	bhi.w	8000468 <__udivmoddi4+0x2c0>
 80002d2:	4643      	mov	r3, r8
 80002d4:	1a2d      	subs	r5, r5, r0
 80002d6:	b2a4      	uxth	r4, r4
 80002d8:	fbb5 f0f7 	udiv	r0, r5, r7
 80002dc:	fb07 5510 	mls	r5, r7, r0, r5
 80002e0:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80002e4:	fb0e fe00 	mul.w	lr, lr, r0
 80002e8:	45a6      	cmp	lr, r4
 80002ea:	d908      	bls.n	80002fe <__udivmoddi4+0x156>
 80002ec:	eb1c 0404 	adds.w	r4, ip, r4
 80002f0:	f100 35ff 	add.w	r5, r0, #4294967295	; 0xffffffff
 80002f4:	d202      	bcs.n	80002fc <__udivmoddi4+0x154>
 80002f6:	45a6      	cmp	lr, r4
 80002f8:	f200 80bb 	bhi.w	8000472 <__udivmoddi4+0x2ca>
 80002fc:	4628      	mov	r0, r5
 80002fe:	eba4 040e 	sub.w	r4, r4, lr
 8000302:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000306:	e79e      	b.n	8000246 <__udivmoddi4+0x9e>
 8000308:	f1c1 0720 	rsb	r7, r1, #32
 800030c:	408b      	lsls	r3, r1
 800030e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000312:	ea4c 0c03 	orr.w	ip, ip, r3
 8000316:	fa20 f407 	lsr.w	r4, r0, r7
 800031a:	fa05 f301 	lsl.w	r3, r5, r1
 800031e:	431c      	orrs	r4, r3
 8000320:	40fd      	lsrs	r5, r7
 8000322:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000326:	fa00 f301 	lsl.w	r3, r0, r1
 800032a:	fbb5 f8f9 	udiv	r8, r5, r9
 800032e:	0c20      	lsrs	r0, r4, #16
 8000330:	fa1f fe8c 	uxth.w	lr, ip
 8000334:	fb09 5518 	mls	r5, r9, r8, r5
 8000338:	ea40 4505 	orr.w	r5, r0, r5, lsl #16
 800033c:	fb08 f00e 	mul.w	r0, r8, lr
 8000340:	42a8      	cmp	r0, r5
 8000342:	fa02 f201 	lsl.w	r2, r2, r1
 8000346:	d90b      	bls.n	8000360 <__udivmoddi4+0x1b8>
 8000348:	eb1c 0505 	adds.w	r5, ip, r5
 800034c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000350:	f080 8088 	bcs.w	8000464 <__udivmoddi4+0x2bc>
 8000354:	42a8      	cmp	r0, r5
 8000356:	f240 8085 	bls.w	8000464 <__udivmoddi4+0x2bc>
 800035a:	f1a8 0802 	sub.w	r8, r8, #2
 800035e:	4465      	add	r5, ip
 8000360:	1a2d      	subs	r5, r5, r0
 8000362:	b2a4      	uxth	r4, r4
 8000364:	fbb5 f0f9 	udiv	r0, r5, r9
 8000368:	fb09 5510 	mls	r5, r9, r0, r5
 800036c:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8000370:	fb00 fe0e 	mul.w	lr, r0, lr
 8000374:	45ae      	cmp	lr, r5
 8000376:	d908      	bls.n	800038a <__udivmoddi4+0x1e2>
 8000378:	eb1c 0505 	adds.w	r5, ip, r5
 800037c:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000380:	d26c      	bcs.n	800045c <__udivmoddi4+0x2b4>
 8000382:	45ae      	cmp	lr, r5
 8000384:	d96a      	bls.n	800045c <__udivmoddi4+0x2b4>
 8000386:	3802      	subs	r0, #2
 8000388:	4465      	add	r5, ip
 800038a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800038e:	fba0 9402 	umull	r9, r4, r0, r2
 8000392:	eba5 050e 	sub.w	r5, r5, lr
 8000396:	42a5      	cmp	r5, r4
 8000398:	46c8      	mov	r8, r9
 800039a:	46a6      	mov	lr, r4
 800039c:	d356      	bcc.n	800044c <__udivmoddi4+0x2a4>
 800039e:	d053      	beq.n	8000448 <__udivmoddi4+0x2a0>
 80003a0:	b15e      	cbz	r6, 80003ba <__udivmoddi4+0x212>
 80003a2:	ebb3 0208 	subs.w	r2, r3, r8
 80003a6:	eb65 050e 	sbc.w	r5, r5, lr
 80003aa:	fa05 f707 	lsl.w	r7, r5, r7
 80003ae:	fa22 f301 	lsr.w	r3, r2, r1
 80003b2:	40cd      	lsrs	r5, r1
 80003b4:	431f      	orrs	r7, r3
 80003b6:	e9c6 7500 	strd	r7, r5, [r6]
 80003ba:	2100      	movs	r1, #0
 80003bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c0:	f1c2 0320 	rsb	r3, r2, #32
 80003c4:	fa20 f103 	lsr.w	r1, r0, r3
 80003c8:	fa0c fc02 	lsl.w	ip, ip, r2
 80003cc:	fa25 f303 	lsr.w	r3, r5, r3
 80003d0:	4095      	lsls	r5, r2
 80003d2:	430d      	orrs	r5, r1
 80003d4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003d8:	fa1f fe8c 	uxth.w	lr, ip
 80003dc:	fbb3 f1f7 	udiv	r1, r3, r7
 80003e0:	fb07 3011 	mls	r0, r7, r1, r3
 80003e4:	0c2b      	lsrs	r3, r5, #16
 80003e6:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80003ea:	fb01 f00e 	mul.w	r0, r1, lr
 80003ee:	4298      	cmp	r0, r3
 80003f0:	fa04 f402 	lsl.w	r4, r4, r2
 80003f4:	d908      	bls.n	8000408 <__udivmoddi4+0x260>
 80003f6:	eb1c 0303 	adds.w	r3, ip, r3
 80003fa:	f101 38ff 	add.w	r8, r1, #4294967295	; 0xffffffff
 80003fe:	d22f      	bcs.n	8000460 <__udivmoddi4+0x2b8>
 8000400:	4298      	cmp	r0, r3
 8000402:	d92d      	bls.n	8000460 <__udivmoddi4+0x2b8>
 8000404:	3902      	subs	r1, #2
 8000406:	4463      	add	r3, ip
 8000408:	1a1b      	subs	r3, r3, r0
 800040a:	b2ad      	uxth	r5, r5
 800040c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000410:	fb07 3310 	mls	r3, r7, r0, r3
 8000414:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000418:	fb00 f30e 	mul.w	r3, r0, lr
 800041c:	42ab      	cmp	r3, r5
 800041e:	d908      	bls.n	8000432 <__udivmoddi4+0x28a>
 8000420:	eb1c 0505 	adds.w	r5, ip, r5
 8000424:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000428:	d216      	bcs.n	8000458 <__udivmoddi4+0x2b0>
 800042a:	42ab      	cmp	r3, r5
 800042c:	d914      	bls.n	8000458 <__udivmoddi4+0x2b0>
 800042e:	3802      	subs	r0, #2
 8000430:	4465      	add	r5, ip
 8000432:	1aed      	subs	r5, r5, r3
 8000434:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000438:	e738      	b.n	80002ac <__udivmoddi4+0x104>
 800043a:	4631      	mov	r1, r6
 800043c:	4630      	mov	r0, r6
 800043e:	e707      	b.n	8000250 <__udivmoddi4+0xa8>
 8000440:	4686      	mov	lr, r0
 8000442:	e6e5      	b.n	8000210 <__udivmoddi4+0x68>
 8000444:	4618      	mov	r0, r3
 8000446:	e6fa      	b.n	800023e <__udivmoddi4+0x96>
 8000448:	454b      	cmp	r3, r9
 800044a:	d2a9      	bcs.n	80003a0 <__udivmoddi4+0x1f8>
 800044c:	ebb9 0802 	subs.w	r8, r9, r2
 8000450:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000454:	3801      	subs	r0, #1
 8000456:	e7a3      	b.n	80003a0 <__udivmoddi4+0x1f8>
 8000458:	4640      	mov	r0, r8
 800045a:	e7ea      	b.n	8000432 <__udivmoddi4+0x28a>
 800045c:	4620      	mov	r0, r4
 800045e:	e794      	b.n	800038a <__udivmoddi4+0x1e2>
 8000460:	4641      	mov	r1, r8
 8000462:	e7d1      	b.n	8000408 <__udivmoddi4+0x260>
 8000464:	46d0      	mov	r8, sl
 8000466:	e77b      	b.n	8000360 <__udivmoddi4+0x1b8>
 8000468:	3b02      	subs	r3, #2
 800046a:	4465      	add	r5, ip
 800046c:	e732      	b.n	80002d4 <__udivmoddi4+0x12c>
 800046e:	4608      	mov	r0, r1
 8000470:	e709      	b.n	8000286 <__udivmoddi4+0xde>
 8000472:	4464      	add	r4, ip
 8000474:	3802      	subs	r0, #2
 8000476:	e742      	b.n	80002fe <__udivmoddi4+0x156>

08000478 <__aeabi_idiv0>:
 8000478:	4770      	bx	lr
 800047a:	bf00      	nop

0800047c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800047c:	b480      	push	{r7}
 800047e:	af00      	add	r7, sp, #0

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
#endif
}
 8000480:	bf00      	nop
 8000482:	46bd      	mov	sp, r7
 8000484:	bc80      	pop	{r7}
 8000486:	4770      	bx	lr

08000488 <LL_RCC_LSE_SetDriveCapability>:
  *         @arg @ref LL_RCC_LSEDRIVE_MEDIUMHIGH
  *         @arg @ref LL_RCC_LSEDRIVE_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_SetDriveCapability(uint32_t LSEDrive)
{
 8000488:	b480      	push	{r7}
 800048a:	b083      	sub	sp, #12
 800048c:	af00      	add	r7, sp, #0
 800048e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 8000490:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000494:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000498:	f023 0218 	bic.w	r2, r3, #24
 800049c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80004a0:	687b      	ldr	r3, [r7, #4]
 80004a2:	4313      	orrs	r3, r2
 80004a4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 80004a8:	bf00      	nop
 80004aa:	370c      	adds	r7, #12
 80004ac:	46bd      	mov	sp, r7
 80004ae:	bc80      	pop	{r7}
 80004b0:	4770      	bx	lr

080004b2 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOC
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOH
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 80004b2:	b480      	push	{r7}
 80004b4:	b085      	sub	sp, #20
 80004b6:	af00      	add	r7, sp, #0
 80004b8:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 80004ba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80004be:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80004c0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80004c4:	687b      	ldr	r3, [r7, #4]
 80004c6:	4313      	orrs	r3, r2
 80004c8:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80004ca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80004ce:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80004d0:	687b      	ldr	r3, [r7, #4]
 80004d2:	4013      	ands	r3, r2
 80004d4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80004d6:	68fb      	ldr	r3, [r7, #12]
}
 80004d8:	bf00      	nop
 80004da:	3714      	adds	r7, #20
 80004dc:	46bd      	mov	sp, r7
 80004de:	bc80      	pop	{r7}
 80004e0:	4770      	bx	lr

080004e2 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004e2:	b580      	push	{r7, lr}
 80004e4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004e6:	f000 f995 	bl	8000814 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004ea:	f000 f809 	bl	8000500 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004ee:	f000 f8b1 	bl	8000654 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80004f2:	f000 f863 	bl	80005bc <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Boot CPU2 */
  HAL_PWREx_ReleaseCore(PWR_CORE_CPU2);
 80004f6:	2001      	movs	r0, #1
 80004f8:	f000 fc6c 	bl	8000dd4 <HAL_PWREx_ReleaseCore>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80004fc:	e7fe      	b.n	80004fc <main+0x1a>
	...

08000500 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000500:	b580      	push	{r7, lr}
 8000502:	b09a      	sub	sp, #104	; 0x68
 8000504:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000506:	f107 0320 	add.w	r3, r7, #32
 800050a:	2248      	movs	r2, #72	; 0x48
 800050c:	2100      	movs	r1, #0
 800050e:	4618      	mov	r0, r3
 8000510:	f002 fd40 	bl	8002f94 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000514:	1d3b      	adds	r3, r7, #4
 8000516:	2200      	movs	r2, #0
 8000518:	601a      	str	r2, [r3, #0]
 800051a:	605a      	str	r2, [r3, #4]
 800051c:	609a      	str	r2, [r3, #8]
 800051e:	60da      	str	r2, [r3, #12]
 8000520:	611a      	str	r2, [r3, #16]
 8000522:	615a      	str	r2, [r3, #20]
 8000524:	619a      	str	r2, [r3, #24]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000526:	f000 fc2d 	bl	8000d84 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 800052a:	2000      	movs	r0, #0
 800052c:	f7ff ffac 	bl	8000488 <LL_RCC_LSE_SetDriveCapability>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000530:	4b21      	ldr	r3, [pc, #132]	; (80005b8 <SystemClock_Config+0xb8>)
 8000532:	681b      	ldr	r3, [r3, #0]
 8000534:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000538:	4a1f      	ldr	r2, [pc, #124]	; (80005b8 <SystemClock_Config+0xb8>)
 800053a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800053e:	6013      	str	r3, [r2, #0]
 8000540:	4b1d      	ldr	r3, [pc, #116]	; (80005b8 <SystemClock_Config+0xb8>)
 8000542:	681b      	ldr	r3, [r3, #0]
 8000544:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000548:	603b      	str	r3, [r7, #0]
 800054a:	683b      	ldr	r3, [r7, #0]

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_LSE
 800054c:	232c      	movs	r3, #44	; 0x2c
 800054e:	623b      	str	r3, [r7, #32]
                              |RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000550:	2381      	movs	r3, #129	; 0x81
 8000552:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000554:	2301      	movs	r3, #1
 8000556:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8000558:	2300      	movs	r3, #0
 800055a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 800055c:	2360      	movs	r3, #96	; 0x60
 800055e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.LSIDiv = RCC_LSI_DIV1;
 8000560:	2300      	movs	r3, #0
 8000562:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000564:	2301      	movs	r3, #1
 8000566:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000568:	2300      	movs	r3, #0
 800056a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800056c:	f107 0320 	add.w	r3, r7, #32
 8000570:	4618      	mov	r0, r3
 8000572:	f000 fef1 	bl	8001358 <HAL_RCC_OscConfig>
 8000576:	4603      	mov	r3, r0
 8000578:	2b00      	cmp	r3, #0
 800057a:	d001      	beq.n	8000580 <SystemClock_Config+0x80>
  {
    Error_Handler();
 800057c:	f000 f877 	bl	800066e <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK3|RCC_CLOCKTYPE_HCLK2
 8000580:	236f      	movs	r3, #111	; 0x6f
 8000582:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000584:	2300      	movs	r3, #0
 8000586:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000588:	2300      	movs	r3, #0
 800058a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800058c:	2300      	movs	r3, #0
 800058e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000590:	2300      	movs	r3, #0
 8000592:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 8000594:	2300      	movs	r3, #0
 8000596:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK3Divider = RCC_SYSCLK_DIV1;
 8000598:	2300      	movs	r3, #0
 800059a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800059c:	1d3b      	adds	r3, r7, #4
 800059e:	2100      	movs	r1, #0
 80005a0:	4618      	mov	r0, r3
 80005a2:	f001 fa5b 	bl	8001a5c <HAL_RCC_ClockConfig>
 80005a6:	4603      	mov	r3, r0
 80005a8:	2b00      	cmp	r3, #0
 80005aa:	d001      	beq.n	80005b0 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 80005ac:	f000 f85f 	bl	800066e <Error_Handler>
  }
}
 80005b0:	bf00      	nop
 80005b2:	3768      	adds	r7, #104	; 0x68
 80005b4:	46bd      	mov	sp, r7
 80005b6:	bd80      	pop	{r7, pc}
 80005b8:	58000400 	.word	0x58000400

080005bc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80005c0:	4b22      	ldr	r3, [pc, #136]	; (800064c <MX_USART2_UART_Init+0x90>)
 80005c2:	4a23      	ldr	r2, [pc, #140]	; (8000650 <MX_USART2_UART_Init+0x94>)
 80005c4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80005c6:	4b21      	ldr	r3, [pc, #132]	; (800064c <MX_USART2_UART_Init+0x90>)
 80005c8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80005cc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80005ce:	4b1f      	ldr	r3, [pc, #124]	; (800064c <MX_USART2_UART_Init+0x90>)
 80005d0:	2200      	movs	r2, #0
 80005d2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80005d4:	4b1d      	ldr	r3, [pc, #116]	; (800064c <MX_USART2_UART_Init+0x90>)
 80005d6:	2200      	movs	r2, #0
 80005d8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80005da:	4b1c      	ldr	r3, [pc, #112]	; (800064c <MX_USART2_UART_Init+0x90>)
 80005dc:	2200      	movs	r2, #0
 80005de:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80005e0:	4b1a      	ldr	r3, [pc, #104]	; (800064c <MX_USART2_UART_Init+0x90>)
 80005e2:	220c      	movs	r2, #12
 80005e4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80005e6:	4b19      	ldr	r3, [pc, #100]	; (800064c <MX_USART2_UART_Init+0x90>)
 80005e8:	2200      	movs	r2, #0
 80005ea:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80005ec:	4b17      	ldr	r3, [pc, #92]	; (800064c <MX_USART2_UART_Init+0x90>)
 80005ee:	2200      	movs	r2, #0
 80005f0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80005f2:	4b16      	ldr	r3, [pc, #88]	; (800064c <MX_USART2_UART_Init+0x90>)
 80005f4:	2200      	movs	r2, #0
 80005f6:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80005f8:	4b14      	ldr	r3, [pc, #80]	; (800064c <MX_USART2_UART_Init+0x90>)
 80005fa:	2200      	movs	r2, #0
 80005fc:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80005fe:	4b13      	ldr	r3, [pc, #76]	; (800064c <MX_USART2_UART_Init+0x90>)
 8000600:	2200      	movs	r2, #0
 8000602:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000604:	4811      	ldr	r0, [pc, #68]	; (800064c <MX_USART2_UART_Init+0x90>)
 8000606:	f001 ff24 	bl	8002452 <HAL_UART_Init>
 800060a:	4603      	mov	r3, r0
 800060c:	2b00      	cmp	r3, #0
 800060e:	d001      	beq.n	8000614 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8000610:	f000 f82d 	bl	800066e <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000614:	2100      	movs	r1, #0
 8000616:	480d      	ldr	r0, [pc, #52]	; (800064c <MX_USART2_UART_Init+0x90>)
 8000618:	f002 fbcf 	bl	8002dba <HAL_UARTEx_SetTxFifoThreshold>
 800061c:	4603      	mov	r3, r0
 800061e:	2b00      	cmp	r3, #0
 8000620:	d001      	beq.n	8000626 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8000622:	f000 f824 	bl	800066e <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000626:	2100      	movs	r1, #0
 8000628:	4808      	ldr	r0, [pc, #32]	; (800064c <MX_USART2_UART_Init+0x90>)
 800062a:	f002 fc04 	bl	8002e36 <HAL_UARTEx_SetRxFifoThreshold>
 800062e:	4603      	mov	r3, r0
 8000630:	2b00      	cmp	r3, #0
 8000632:	d001      	beq.n	8000638 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8000634:	f000 f81b 	bl	800066e <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000638:	4804      	ldr	r0, [pc, #16]	; (800064c <MX_USART2_UART_Init+0x90>)
 800063a:	f002 fb86 	bl	8002d4a <HAL_UARTEx_DisableFifoMode>
 800063e:	4603      	mov	r3, r0
 8000640:	2b00      	cmp	r3, #0
 8000642:	d001      	beq.n	8000648 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8000644:	f000 f813 	bl	800066e <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000648:	bf00      	nop
 800064a:	bd80      	pop	{r7, pc}
 800064c:	20000028 	.word	0x20000028
 8000650:	40004400 	.word	0x40004400

08000654 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000654:	b580      	push	{r7, lr}
 8000656:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000658:	2001      	movs	r0, #1
 800065a:	f7ff ff2a 	bl	80004b2 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800065e:	2004      	movs	r0, #4
 8000660:	f7ff ff27 	bl	80004b2 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000664:	2002      	movs	r0, #2
 8000666:	f7ff ff24 	bl	80004b2 <LL_AHB2_GRP1_EnableClock>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800066a:	bf00      	nop
 800066c:	bd80      	pop	{r7, pc}

0800066e <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800066e:	b480      	push	{r7}
 8000670:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000672:	b672      	cpsid	i
}
 8000674:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000676:	e7fe      	b.n	8000676 <Error_Handler+0x8>

08000678 <LL_AHB2_GRP1_EnableClock>:
{
 8000678:	b480      	push	{r7}
 800067a:	b085      	sub	sp, #20
 800067c:	af00      	add	r7, sp, #0
 800067e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000680:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000684:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000686:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800068a:	687b      	ldr	r3, [r7, #4]
 800068c:	4313      	orrs	r3, r2
 800068e:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000690:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000694:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000696:	687b      	ldr	r3, [r7, #4]
 8000698:	4013      	ands	r3, r2
 800069a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800069c:	68fb      	ldr	r3, [r7, #12]
}
 800069e:	bf00      	nop
 80006a0:	3714      	adds	r7, #20
 80006a2:	46bd      	mov	sp, r7
 80006a4:	bc80      	pop	{r7}
 80006a6:	4770      	bx	lr

080006a8 <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_DAC
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 80006a8:	b480      	push	{r7}
 80006aa:	b085      	sub	sp, #20
 80006ac:	af00      	add	r7, sp, #0
 80006ae:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 80006b0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80006b4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80006b6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80006ba:	687b      	ldr	r3, [r7, #4]
 80006bc:	4313      	orrs	r3, r2
 80006be:	658b      	str	r3, [r1, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 80006c0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80006c4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80006c6:	687b      	ldr	r3, [r7, #4]
 80006c8:	4013      	ands	r3, r2
 80006ca:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80006cc:	68fb      	ldr	r3, [r7, #12]
}
 80006ce:	bf00      	nop
 80006d0:	3714      	adds	r7, #20
 80006d2:	46bd      	mov	sp, r7
 80006d4:	bc80      	pop	{r7}
 80006d6:	4770      	bx	lr

080006d8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80006d8:	b480      	push	{r7}
 80006da:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80006dc:	bf00      	nop
 80006de:	46bd      	mov	sp, r7
 80006e0:	bc80      	pop	{r7}
 80006e2:	4770      	bx	lr

080006e4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80006e4:	b580      	push	{r7, lr}
 80006e6:	b096      	sub	sp, #88	; 0x58
 80006e8:	af00      	add	r7, sp, #0
 80006ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006ec:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80006f0:	2200      	movs	r2, #0
 80006f2:	601a      	str	r2, [r3, #0]
 80006f4:	605a      	str	r2, [r3, #4]
 80006f6:	609a      	str	r2, [r3, #8]
 80006f8:	60da      	str	r2, [r3, #12]
 80006fa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80006fc:	f107 030c 	add.w	r3, r7, #12
 8000700:	2238      	movs	r2, #56	; 0x38
 8000702:	2100      	movs	r1, #0
 8000704:	4618      	mov	r0, r3
 8000706:	f002 fc45 	bl	8002f94 <memset>
  if(huart->Instance==USART2)
 800070a:	687b      	ldr	r3, [r7, #4]
 800070c:	681b      	ldr	r3, [r3, #0]
 800070e:	4a17      	ldr	r2, [pc, #92]	; (800076c <HAL_UART_MspInit+0x88>)
 8000710:	4293      	cmp	r3, r2
 8000712:	d126      	bne.n	8000762 <HAL_UART_MspInit+0x7e>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000714:	2302      	movs	r3, #2
 8000716:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000718:	f44f 2340 	mov.w	r3, #786432	; 0xc0000
 800071c:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800071e:	f107 030c 	add.w	r3, r7, #12
 8000722:	4618      	mov	r0, r3
 8000724:	f001 fd5a 	bl	80021dc <HAL_RCCEx_PeriphCLKConfig>
 8000728:	4603      	mov	r3, r0
 800072a:	2b00      	cmp	r3, #0
 800072c:	d001      	beq.n	8000732 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800072e:	f7ff ff9e 	bl	800066e <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000732:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8000736:	f7ff ffb7 	bl	80006a8 <LL_APB1_GRP1_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800073a:	2001      	movs	r0, #1
 800073c:	f7ff ff9c 	bl	8000678 <LL_AHB2_GRP1_EnableClock>
    /**USART2 GPIO Configuration
    PA3     ------> USART2_RX
    PA2     ------> USART2_TX
    */
    GPIO_InitStruct.Pin = T_VCP_RX_Pin|T_VCP_RXA2_Pin;
 8000740:	230c      	movs	r3, #12
 8000742:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000744:	2302      	movs	r3, #2
 8000746:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000748:	2300      	movs	r3, #0
 800074a:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800074c:	2300      	movs	r3, #0
 800074e:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000750:	2307      	movs	r3, #7
 8000752:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000754:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000758:	4619      	mov	r1, r3
 800075a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800075e:	f000 f9b1 	bl	8000ac4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000762:	bf00      	nop
 8000764:	3758      	adds	r7, #88	; 0x58
 8000766:	46bd      	mov	sp, r7
 8000768:	bd80      	pop	{r7, pc}
 800076a:	bf00      	nop
 800076c:	40004400 	.word	0x40004400

08000770 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000770:	b480      	push	{r7}
 8000772:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000774:	e7fe      	b.n	8000774 <NMI_Handler+0x4>

08000776 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000776:	b480      	push	{r7}
 8000778:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800077a:	e7fe      	b.n	800077a <HardFault_Handler+0x4>

0800077c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800077c:	b480      	push	{r7}
 800077e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000780:	e7fe      	b.n	8000780 <MemManage_Handler+0x4>

08000782 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000782:	b480      	push	{r7}
 8000784:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000786:	e7fe      	b.n	8000786 <BusFault_Handler+0x4>

08000788 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000788:	b480      	push	{r7}
 800078a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800078c:	e7fe      	b.n	800078c <UsageFault_Handler+0x4>

0800078e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800078e:	b480      	push	{r7}
 8000790:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000792:	bf00      	nop
 8000794:	46bd      	mov	sp, r7
 8000796:	bc80      	pop	{r7}
 8000798:	4770      	bx	lr

0800079a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800079a:	b480      	push	{r7}
 800079c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800079e:	bf00      	nop
 80007a0:	46bd      	mov	sp, r7
 80007a2:	bc80      	pop	{r7}
 80007a4:	4770      	bx	lr

080007a6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80007a6:	b480      	push	{r7}
 80007a8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80007aa:	bf00      	nop
 80007ac:	46bd      	mov	sp, r7
 80007ae:	bc80      	pop	{r7}
 80007b0:	4770      	bx	lr

080007b2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80007b2:	b580      	push	{r7, lr}
 80007b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80007b6:	f000 f887 	bl	80008c8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80007ba:	bf00      	nop
 80007bc:	bd80      	pop	{r7, pc}
	...

080007c0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80007c0:	480d      	ldr	r0, [pc, #52]	; (80007f8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80007c2:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 80007c4:	f7ff fe5a 	bl	800047c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80007c8:	480c      	ldr	r0, [pc, #48]	; (80007fc <LoopForever+0x6>)
  ldr r1, =_edata
 80007ca:	490d      	ldr	r1, [pc, #52]	; (8000800 <LoopForever+0xa>)
  ldr r2, =_sidata
 80007cc:	4a0d      	ldr	r2, [pc, #52]	; (8000804 <LoopForever+0xe>)
  movs r3, #0
 80007ce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80007d0:	e002      	b.n	80007d8 <LoopCopyDataInit>

080007d2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80007d2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80007d4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80007d6:	3304      	adds	r3, #4

080007d8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80007d8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80007da:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80007dc:	d3f9      	bcc.n	80007d2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80007de:	4a0a      	ldr	r2, [pc, #40]	; (8000808 <LoopForever+0x12>)
  ldr r4, =_ebss
 80007e0:	4c0a      	ldr	r4, [pc, #40]	; (800080c <LoopForever+0x16>)
  movs r3, #0
 80007e2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80007e4:	e001      	b.n	80007ea <LoopFillZerobss>

080007e6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80007e6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80007e8:	3204      	adds	r2, #4

080007ea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80007ea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80007ec:	d3fb      	bcc.n	80007e6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80007ee:	f002 fbad 	bl	8002f4c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80007f2:	f7ff fe76 	bl	80004e2 <main>

080007f6 <LoopForever>:

LoopForever:
    b LoopForever
 80007f6:	e7fe      	b.n	80007f6 <LoopForever>
  ldr   r0, =_estack
 80007f8:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 80007fc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000800:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000804:	080030b0 	.word	0x080030b0
  ldr r2, =_sbss
 8000808:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 800080c:	200000c0 	.word	0x200000c0

08000810 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000810:	e7fe      	b.n	8000810 <ADC_IRQHandler>
	...

08000814 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	b082      	sub	sp, #8
 8000818:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800081a:	2300      	movs	r3, #0
 800081c:	71fb      	strb	r3, [r7, #7]
#endif /* PREFETCH_ENABLE */

#ifdef CORE_CM0PLUS
#else
  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800081e:	2003      	movs	r0, #3
 8000820:	f000 f91e 	bl	8000a60 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(DUAL_CORE) && defined(CORE_CM0PLUS)
  SystemCoreClock = HAL_RCC_GetHCLK2Freq();
#else
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8000824:	f001 fafc 	bl	8001e20 <HAL_RCC_GetHCLKFreq>
 8000828:	4603      	mov	r3, r0
 800082a:	4a09      	ldr	r2, [pc, #36]	; (8000850 <HAL_Init+0x3c>)
 800082c:	6013      	str	r3, [r2, #0]
#endif

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800082e:	2000      	movs	r0, #0
 8000830:	f000 f810 	bl	8000854 <HAL_InitTick>
 8000834:	4603      	mov	r3, r0
 8000836:	2b00      	cmp	r3, #0
 8000838:	d002      	beq.n	8000840 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 800083a:	2301      	movs	r3, #1
 800083c:	71fb      	strb	r3, [r7, #7]
 800083e:	e001      	b.n	8000844 <HAL_Init+0x30>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000840:	f7ff ff4a 	bl	80006d8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000844:	79fb      	ldrb	r3, [r7, #7]
}
 8000846:	4618      	mov	r0, r3
 8000848:	3708      	adds	r7, #8
 800084a:	46bd      	mov	sp, r7
 800084c:	bd80      	pop	{r7, pc}
 800084e:	bf00      	nop
 8000850:	20000000 	.word	0x20000000

08000854 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000854:	b580      	push	{r7, lr}
 8000856:	b084      	sub	sp, #16
 8000858:	af00      	add	r7, sp, #0
 800085a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800085c:	2300      	movs	r3, #0
 800085e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000860:	4b17      	ldr	r3, [pc, #92]	; (80008c0 <HAL_InitTick+0x6c>)
 8000862:	781b      	ldrb	r3, [r3, #0]
 8000864:	2b00      	cmp	r3, #0
 8000866:	d024      	beq.n	80008b2 <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
#ifdef CORE_CM0PLUS
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLK2Freq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
#else
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000868:	f001 fada 	bl	8001e20 <HAL_RCC_GetHCLKFreq>
 800086c:	4602      	mov	r2, r0
 800086e:	4b14      	ldr	r3, [pc, #80]	; (80008c0 <HAL_InitTick+0x6c>)
 8000870:	781b      	ldrb	r3, [r3, #0]
 8000872:	4619      	mov	r1, r3
 8000874:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000878:	fbb3 f3f1 	udiv	r3, r3, r1
 800087c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000880:	4618      	mov	r0, r3
 8000882:	f000 f912 	bl	8000aaa <HAL_SYSTICK_Config>
 8000886:	4603      	mov	r3, r0
 8000888:	2b00      	cmp	r3, #0
 800088a:	d10f      	bne.n	80008ac <HAL_InitTick+0x58>
#endif
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800088c:	687b      	ldr	r3, [r7, #4]
 800088e:	2b0f      	cmp	r3, #15
 8000890:	d809      	bhi.n	80008a6 <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000892:	2200      	movs	r2, #0
 8000894:	6879      	ldr	r1, [r7, #4]
 8000896:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800089a:	f000 f8ec 	bl	8000a76 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800089e:	4a09      	ldr	r2, [pc, #36]	; (80008c4 <HAL_InitTick+0x70>)
 80008a0:	687b      	ldr	r3, [r7, #4]
 80008a2:	6013      	str	r3, [r2, #0]
 80008a4:	e007      	b.n	80008b6 <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 80008a6:	2301      	movs	r3, #1
 80008a8:	73fb      	strb	r3, [r7, #15]
 80008aa:	e004      	b.n	80008b6 <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 80008ac:	2301      	movs	r3, #1
 80008ae:	73fb      	strb	r3, [r7, #15]
 80008b0:	e001      	b.n	80008b6 <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 80008b2:	2301      	movs	r3, #1
 80008b4:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80008b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80008b8:	4618      	mov	r0, r3
 80008ba:	3710      	adds	r7, #16
 80008bc:	46bd      	mov	sp, r7
 80008be:	bd80      	pop	{r7, pc}
 80008c0:	20000008 	.word	0x20000008
 80008c4:	20000004 	.word	0x20000004

080008c8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80008c8:	b480      	push	{r7}
 80008ca:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80008cc:	4b05      	ldr	r3, [pc, #20]	; (80008e4 <HAL_IncTick+0x1c>)
 80008ce:	781b      	ldrb	r3, [r3, #0]
 80008d0:	461a      	mov	r2, r3
 80008d2:	4b05      	ldr	r3, [pc, #20]	; (80008e8 <HAL_IncTick+0x20>)
 80008d4:	681b      	ldr	r3, [r3, #0]
 80008d6:	4413      	add	r3, r2
 80008d8:	4a03      	ldr	r2, [pc, #12]	; (80008e8 <HAL_IncTick+0x20>)
 80008da:	6013      	str	r3, [r2, #0]
}
 80008dc:	bf00      	nop
 80008de:	46bd      	mov	sp, r7
 80008e0:	bc80      	pop	{r7}
 80008e2:	4770      	bx	lr
 80008e4:	20000008 	.word	0x20000008
 80008e8:	200000bc 	.word	0x200000bc

080008ec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80008ec:	b480      	push	{r7}
 80008ee:	af00      	add	r7, sp, #0
  return uwTick;
 80008f0:	4b02      	ldr	r3, [pc, #8]	; (80008fc <HAL_GetTick+0x10>)
 80008f2:	681b      	ldr	r3, [r3, #0]
}
 80008f4:	4618      	mov	r0, r3
 80008f6:	46bd      	mov	sp, r7
 80008f8:	bc80      	pop	{r7}
 80008fa:	4770      	bx	lr
 80008fc:	200000bc 	.word	0x200000bc

08000900 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000900:	b480      	push	{r7}
 8000902:	b085      	sub	sp, #20
 8000904:	af00      	add	r7, sp, #0
 8000906:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000908:	687b      	ldr	r3, [r7, #4]
 800090a:	f003 0307 	and.w	r3, r3, #7
 800090e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000910:	4b0c      	ldr	r3, [pc, #48]	; (8000944 <__NVIC_SetPriorityGrouping+0x44>)
 8000912:	68db      	ldr	r3, [r3, #12]
 8000914:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000916:	68ba      	ldr	r2, [r7, #8]
 8000918:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800091c:	4013      	ands	r3, r2
 800091e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000920:	68fb      	ldr	r3, [r7, #12]
 8000922:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000924:	68bb      	ldr	r3, [r7, #8]
 8000926:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000928:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800092c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000930:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000932:	4a04      	ldr	r2, [pc, #16]	; (8000944 <__NVIC_SetPriorityGrouping+0x44>)
 8000934:	68bb      	ldr	r3, [r7, #8]
 8000936:	60d3      	str	r3, [r2, #12]
}
 8000938:	bf00      	nop
 800093a:	3714      	adds	r7, #20
 800093c:	46bd      	mov	sp, r7
 800093e:	bc80      	pop	{r7}
 8000940:	4770      	bx	lr
 8000942:	bf00      	nop
 8000944:	e000ed00 	.word	0xe000ed00

08000948 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000948:	b480      	push	{r7}
 800094a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800094c:	4b04      	ldr	r3, [pc, #16]	; (8000960 <__NVIC_GetPriorityGrouping+0x18>)
 800094e:	68db      	ldr	r3, [r3, #12]
 8000950:	0a1b      	lsrs	r3, r3, #8
 8000952:	f003 0307 	and.w	r3, r3, #7
}
 8000956:	4618      	mov	r0, r3
 8000958:	46bd      	mov	sp, r7
 800095a:	bc80      	pop	{r7}
 800095c:	4770      	bx	lr
 800095e:	bf00      	nop
 8000960:	e000ed00 	.word	0xe000ed00

08000964 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000964:	b480      	push	{r7}
 8000966:	b083      	sub	sp, #12
 8000968:	af00      	add	r7, sp, #0
 800096a:	4603      	mov	r3, r0
 800096c:	6039      	str	r1, [r7, #0]
 800096e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000970:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000974:	2b00      	cmp	r3, #0
 8000976:	db0a      	blt.n	800098e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000978:	683b      	ldr	r3, [r7, #0]
 800097a:	b2da      	uxtb	r2, r3
 800097c:	490c      	ldr	r1, [pc, #48]	; (80009b0 <__NVIC_SetPriority+0x4c>)
 800097e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000982:	0112      	lsls	r2, r2, #4
 8000984:	b2d2      	uxtb	r2, r2
 8000986:	440b      	add	r3, r1
 8000988:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800098c:	e00a      	b.n	80009a4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800098e:	683b      	ldr	r3, [r7, #0]
 8000990:	b2da      	uxtb	r2, r3
 8000992:	4908      	ldr	r1, [pc, #32]	; (80009b4 <__NVIC_SetPriority+0x50>)
 8000994:	79fb      	ldrb	r3, [r7, #7]
 8000996:	f003 030f 	and.w	r3, r3, #15
 800099a:	3b04      	subs	r3, #4
 800099c:	0112      	lsls	r2, r2, #4
 800099e:	b2d2      	uxtb	r2, r2
 80009a0:	440b      	add	r3, r1
 80009a2:	761a      	strb	r2, [r3, #24]
}
 80009a4:	bf00      	nop
 80009a6:	370c      	adds	r7, #12
 80009a8:	46bd      	mov	sp, r7
 80009aa:	bc80      	pop	{r7}
 80009ac:	4770      	bx	lr
 80009ae:	bf00      	nop
 80009b0:	e000e100 	.word	0xe000e100
 80009b4:	e000ed00 	.word	0xe000ed00

080009b8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80009b8:	b480      	push	{r7}
 80009ba:	b089      	sub	sp, #36	; 0x24
 80009bc:	af00      	add	r7, sp, #0
 80009be:	60f8      	str	r0, [r7, #12]
 80009c0:	60b9      	str	r1, [r7, #8]
 80009c2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80009c4:	68fb      	ldr	r3, [r7, #12]
 80009c6:	f003 0307 	and.w	r3, r3, #7
 80009ca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80009cc:	69fb      	ldr	r3, [r7, #28]
 80009ce:	f1c3 0307 	rsb	r3, r3, #7
 80009d2:	2b04      	cmp	r3, #4
 80009d4:	bf28      	it	cs
 80009d6:	2304      	movcs	r3, #4
 80009d8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80009da:	69fb      	ldr	r3, [r7, #28]
 80009dc:	3304      	adds	r3, #4
 80009de:	2b06      	cmp	r3, #6
 80009e0:	d902      	bls.n	80009e8 <NVIC_EncodePriority+0x30>
 80009e2:	69fb      	ldr	r3, [r7, #28]
 80009e4:	3b03      	subs	r3, #3
 80009e6:	e000      	b.n	80009ea <NVIC_EncodePriority+0x32>
 80009e8:	2300      	movs	r3, #0
 80009ea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80009ec:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80009f0:	69bb      	ldr	r3, [r7, #24]
 80009f2:	fa02 f303 	lsl.w	r3, r2, r3
 80009f6:	43da      	mvns	r2, r3
 80009f8:	68bb      	ldr	r3, [r7, #8]
 80009fa:	401a      	ands	r2, r3
 80009fc:	697b      	ldr	r3, [r7, #20]
 80009fe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000a00:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000a04:	697b      	ldr	r3, [r7, #20]
 8000a06:	fa01 f303 	lsl.w	r3, r1, r3
 8000a0a:	43d9      	mvns	r1, r3
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a10:	4313      	orrs	r3, r2
         );
}
 8000a12:	4618      	mov	r0, r3
 8000a14:	3724      	adds	r7, #36	; 0x24
 8000a16:	46bd      	mov	sp, r7
 8000a18:	bc80      	pop	{r7}
 8000a1a:	4770      	bx	lr

08000a1c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	b082      	sub	sp, #8
 8000a20:	af00      	add	r7, sp, #0
 8000a22:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	3b01      	subs	r3, #1
 8000a28:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000a2c:	d301      	bcc.n	8000a32 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000a2e:	2301      	movs	r3, #1
 8000a30:	e00f      	b.n	8000a52 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000a32:	4a0a      	ldr	r2, [pc, #40]	; (8000a5c <SysTick_Config+0x40>)
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	3b01      	subs	r3, #1
 8000a38:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000a3a:	210f      	movs	r1, #15
 8000a3c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000a40:	f7ff ff90 	bl	8000964 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000a44:	4b05      	ldr	r3, [pc, #20]	; (8000a5c <SysTick_Config+0x40>)
 8000a46:	2200      	movs	r2, #0
 8000a48:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000a4a:	4b04      	ldr	r3, [pc, #16]	; (8000a5c <SysTick_Config+0x40>)
 8000a4c:	2207      	movs	r2, #7
 8000a4e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000a50:	2300      	movs	r3, #0
}
 8000a52:	4618      	mov	r0, r3
 8000a54:	3708      	adds	r7, #8
 8000a56:	46bd      	mov	sp, r7
 8000a58:	bd80      	pop	{r7, pc}
 8000a5a:	bf00      	nop
 8000a5c:	e000e010 	.word	0xe000e010

08000a60 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	b082      	sub	sp, #8
 8000a64:	af00      	add	r7, sp, #0
 8000a66:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000a68:	6878      	ldr	r0, [r7, #4]
 8000a6a:	f7ff ff49 	bl	8000900 <__NVIC_SetPriorityGrouping>
}
 8000a6e:	bf00      	nop
 8000a70:	3708      	adds	r7, #8
 8000a72:	46bd      	mov	sp, r7
 8000a74:	bd80      	pop	{r7, pc}

08000a76 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a76:	b580      	push	{r7, lr}
 8000a78:	b086      	sub	sp, #24
 8000a7a:	af00      	add	r7, sp, #0
 8000a7c:	4603      	mov	r3, r0
 8000a7e:	60b9      	str	r1, [r7, #8]
 8000a80:	607a      	str	r2, [r7, #4]
 8000a82:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000a84:	f7ff ff60 	bl	8000948 <__NVIC_GetPriorityGrouping>
 8000a88:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000a8a:	687a      	ldr	r2, [r7, #4]
 8000a8c:	68b9      	ldr	r1, [r7, #8]
 8000a8e:	6978      	ldr	r0, [r7, #20]
 8000a90:	f7ff ff92 	bl	80009b8 <NVIC_EncodePriority>
 8000a94:	4602      	mov	r2, r0
 8000a96:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000a9a:	4611      	mov	r1, r2
 8000a9c:	4618      	mov	r0, r3
 8000a9e:	f7ff ff61 	bl	8000964 <__NVIC_SetPriority>
}
 8000aa2:	bf00      	nop
 8000aa4:	3718      	adds	r7, #24
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	bd80      	pop	{r7, pc}

08000aaa <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000aaa:	b580      	push	{r7, lr}
 8000aac:	b082      	sub	sp, #8
 8000aae:	af00      	add	r7, sp, #0
 8000ab0:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8000ab2:	6878      	ldr	r0, [r7, #4]
 8000ab4:	f7ff ffb2 	bl	8000a1c <SysTick_Config>
 8000ab8:	4603      	mov	r3, r0
}
 8000aba:	4618      	mov	r0, r3
 8000abc:	3708      	adds	r7, #8
 8000abe:	46bd      	mov	sp, r7
 8000ac0:	bd80      	pop	{r7, pc}
	...

08000ac4 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ac4:	b480      	push	{r7}
 8000ac6:	b087      	sub	sp, #28
 8000ac8:	af00      	add	r7, sp, #0
 8000aca:	6078      	str	r0, [r7, #4]
 8000acc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000ace:	2300      	movs	r3, #0
 8000ad0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000ad2:	e140      	b.n	8000d56 <HAL_GPIO_Init+0x292>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000ad4:	683b      	ldr	r3, [r7, #0]
 8000ad6:	681a      	ldr	r2, [r3, #0]
 8000ad8:	2101      	movs	r1, #1
 8000ada:	697b      	ldr	r3, [r7, #20]
 8000adc:	fa01 f303 	lsl.w	r3, r1, r3
 8000ae0:	4013      	ands	r3, r2
 8000ae2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000ae4:	68fb      	ldr	r3, [r7, #12]
 8000ae6:	2b00      	cmp	r3, #0
 8000ae8:	f000 8132 	beq.w	8000d50 <HAL_GPIO_Init+0x28c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000aec:	683b      	ldr	r3, [r7, #0]
 8000aee:	685b      	ldr	r3, [r3, #4]
 8000af0:	f003 0303 	and.w	r3, r3, #3
 8000af4:	2b01      	cmp	r3, #1
 8000af6:	d005      	beq.n	8000b04 <HAL_GPIO_Init+0x40>
 8000af8:	683b      	ldr	r3, [r7, #0]
 8000afa:	685b      	ldr	r3, [r3, #4]
 8000afc:	f003 0303 	and.w	r3, r3, #3
 8000b00:	2b02      	cmp	r3, #2
 8000b02:	d130      	bne.n	8000b66 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	689b      	ldr	r3, [r3, #8]
 8000b08:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8000b0a:	697b      	ldr	r3, [r7, #20]
 8000b0c:	005b      	lsls	r3, r3, #1
 8000b0e:	2203      	movs	r2, #3
 8000b10:	fa02 f303 	lsl.w	r3, r2, r3
 8000b14:	43db      	mvns	r3, r3
 8000b16:	693a      	ldr	r2, [r7, #16]
 8000b18:	4013      	ands	r3, r2
 8000b1a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000b1c:	683b      	ldr	r3, [r7, #0]
 8000b1e:	68da      	ldr	r2, [r3, #12]
 8000b20:	697b      	ldr	r3, [r7, #20]
 8000b22:	005b      	lsls	r3, r3, #1
 8000b24:	fa02 f303 	lsl.w	r3, r2, r3
 8000b28:	693a      	ldr	r2, [r7, #16]
 8000b2a:	4313      	orrs	r3, r2
 8000b2c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	693a      	ldr	r2, [r7, #16]
 8000b32:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	685b      	ldr	r3, [r3, #4]
 8000b38:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000b3a:	2201      	movs	r2, #1
 8000b3c:	697b      	ldr	r3, [r7, #20]
 8000b3e:	fa02 f303 	lsl.w	r3, r2, r3
 8000b42:	43db      	mvns	r3, r3
 8000b44:	693a      	ldr	r2, [r7, #16]
 8000b46:	4013      	ands	r3, r2
 8000b48:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000b4a:	683b      	ldr	r3, [r7, #0]
 8000b4c:	685b      	ldr	r3, [r3, #4]
 8000b4e:	091b      	lsrs	r3, r3, #4
 8000b50:	f003 0201 	and.w	r2, r3, #1
 8000b54:	697b      	ldr	r3, [r7, #20]
 8000b56:	fa02 f303 	lsl.w	r3, r2, r3
 8000b5a:	693a      	ldr	r2, [r7, #16]
 8000b5c:	4313      	orrs	r3, r2
 8000b5e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	693a      	ldr	r2, [r7, #16]
 8000b64:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000b66:	683b      	ldr	r3, [r7, #0]
 8000b68:	685b      	ldr	r3, [r3, #4]
 8000b6a:	f003 0303 	and.w	r3, r3, #3
 8000b6e:	2b03      	cmp	r3, #3
 8000b70:	d017      	beq.n	8000ba2 <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	68db      	ldr	r3, [r3, #12]
 8000b76:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000b78:	697b      	ldr	r3, [r7, #20]
 8000b7a:	005b      	lsls	r3, r3, #1
 8000b7c:	2203      	movs	r2, #3
 8000b7e:	fa02 f303 	lsl.w	r3, r2, r3
 8000b82:	43db      	mvns	r3, r3
 8000b84:	693a      	ldr	r2, [r7, #16]
 8000b86:	4013      	ands	r3, r2
 8000b88:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000b8a:	683b      	ldr	r3, [r7, #0]
 8000b8c:	689a      	ldr	r2, [r3, #8]
 8000b8e:	697b      	ldr	r3, [r7, #20]
 8000b90:	005b      	lsls	r3, r3, #1
 8000b92:	fa02 f303 	lsl.w	r3, r2, r3
 8000b96:	693a      	ldr	r2, [r7, #16]
 8000b98:	4313      	orrs	r3, r2
 8000b9a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	693a      	ldr	r2, [r7, #16]
 8000ba0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000ba2:	683b      	ldr	r3, [r7, #0]
 8000ba4:	685b      	ldr	r3, [r3, #4]
 8000ba6:	f003 0303 	and.w	r3, r3, #3
 8000baa:	2b02      	cmp	r3, #2
 8000bac:	d123      	bne.n	8000bf6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000bae:	697b      	ldr	r3, [r7, #20]
 8000bb0:	08da      	lsrs	r2, r3, #3
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	3208      	adds	r2, #8
 8000bb6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000bba:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8000bbc:	697b      	ldr	r3, [r7, #20]
 8000bbe:	f003 0307 	and.w	r3, r3, #7
 8000bc2:	009b      	lsls	r3, r3, #2
 8000bc4:	220f      	movs	r2, #15
 8000bc6:	fa02 f303 	lsl.w	r3, r2, r3
 8000bca:	43db      	mvns	r3, r3
 8000bcc:	693a      	ldr	r2, [r7, #16]
 8000bce:	4013      	ands	r3, r2
 8000bd0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8000bd2:	683b      	ldr	r3, [r7, #0]
 8000bd4:	691a      	ldr	r2, [r3, #16]
 8000bd6:	697b      	ldr	r3, [r7, #20]
 8000bd8:	f003 0307 	and.w	r3, r3, #7
 8000bdc:	009b      	lsls	r3, r3, #2
 8000bde:	fa02 f303 	lsl.w	r3, r2, r3
 8000be2:	693a      	ldr	r2, [r7, #16]
 8000be4:	4313      	orrs	r3, r2
 8000be6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000be8:	697b      	ldr	r3, [r7, #20]
 8000bea:	08da      	lsrs	r2, r3, #3
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	3208      	adds	r2, #8
 8000bf0:	6939      	ldr	r1, [r7, #16]
 8000bf2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	681b      	ldr	r3, [r3, #0]
 8000bfa:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000bfc:	697b      	ldr	r3, [r7, #20]
 8000bfe:	005b      	lsls	r3, r3, #1
 8000c00:	2203      	movs	r2, #3
 8000c02:	fa02 f303 	lsl.w	r3, r2, r3
 8000c06:	43db      	mvns	r3, r3
 8000c08:	693a      	ldr	r2, [r7, #16]
 8000c0a:	4013      	ands	r3, r2
 8000c0c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000c0e:	683b      	ldr	r3, [r7, #0]
 8000c10:	685b      	ldr	r3, [r3, #4]
 8000c12:	f003 0203 	and.w	r2, r3, #3
 8000c16:	697b      	ldr	r3, [r7, #20]
 8000c18:	005b      	lsls	r3, r3, #1
 8000c1a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c1e:	693a      	ldr	r2, [r7, #16]
 8000c20:	4313      	orrs	r3, r2
 8000c22:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	693a      	ldr	r2, [r7, #16]
 8000c28:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000c2a:	683b      	ldr	r3, [r7, #0]
 8000c2c:	685b      	ldr	r3, [r3, #4]
 8000c2e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	f000 808c 	beq.w	8000d50 <HAL_GPIO_Init+0x28c>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8000c38:	4a4e      	ldr	r2, [pc, #312]	; (8000d74 <HAL_GPIO_Init+0x2b0>)
 8000c3a:	697b      	ldr	r3, [r7, #20]
 8000c3c:	089b      	lsrs	r3, r3, #2
 8000c3e:	3302      	adds	r3, #2
 8000c40:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c44:	613b      	str	r3, [r7, #16]
        temp &= ~(0x07uL << (4U * (position & 0x03U)));
 8000c46:	697b      	ldr	r3, [r7, #20]
 8000c48:	f003 0303 	and.w	r3, r3, #3
 8000c4c:	009b      	lsls	r3, r3, #2
 8000c4e:	2207      	movs	r2, #7
 8000c50:	fa02 f303 	lsl.w	r3, r2, r3
 8000c54:	43db      	mvns	r3, r3
 8000c56:	693a      	ldr	r2, [r7, #16]
 8000c58:	4013      	ands	r3, r2
 8000c5a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000c62:	d00d      	beq.n	8000c80 <HAL_GPIO_Init+0x1bc>
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	4a44      	ldr	r2, [pc, #272]	; (8000d78 <HAL_GPIO_Init+0x2b4>)
 8000c68:	4293      	cmp	r3, r2
 8000c6a:	d007      	beq.n	8000c7c <HAL_GPIO_Init+0x1b8>
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	4a43      	ldr	r2, [pc, #268]	; (8000d7c <HAL_GPIO_Init+0x2b8>)
 8000c70:	4293      	cmp	r3, r2
 8000c72:	d101      	bne.n	8000c78 <HAL_GPIO_Init+0x1b4>
 8000c74:	2302      	movs	r3, #2
 8000c76:	e004      	b.n	8000c82 <HAL_GPIO_Init+0x1be>
 8000c78:	2307      	movs	r3, #7
 8000c7a:	e002      	b.n	8000c82 <HAL_GPIO_Init+0x1be>
 8000c7c:	2301      	movs	r3, #1
 8000c7e:	e000      	b.n	8000c82 <HAL_GPIO_Init+0x1be>
 8000c80:	2300      	movs	r3, #0
 8000c82:	697a      	ldr	r2, [r7, #20]
 8000c84:	f002 0203 	and.w	r2, r2, #3
 8000c88:	0092      	lsls	r2, r2, #2
 8000c8a:	4093      	lsls	r3, r2
 8000c8c:	693a      	ldr	r2, [r7, #16]
 8000c8e:	4313      	orrs	r3, r2
 8000c90:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000c92:	4938      	ldr	r1, [pc, #224]	; (8000d74 <HAL_GPIO_Init+0x2b0>)
 8000c94:	697b      	ldr	r3, [r7, #20]
 8000c96:	089b      	lsrs	r3, r3, #2
 8000c98:	3302      	adds	r3, #2
 8000c9a:	693a      	ldr	r2, [r7, #16]
 8000c9c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000ca0:	4b37      	ldr	r3, [pc, #220]	; (8000d80 <HAL_GPIO_Init+0x2bc>)
 8000ca2:	681b      	ldr	r3, [r3, #0]
 8000ca4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ca6:	68fb      	ldr	r3, [r7, #12]
 8000ca8:	43db      	mvns	r3, r3
 8000caa:	693a      	ldr	r2, [r7, #16]
 8000cac:	4013      	ands	r3, r2
 8000cae:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000cb0:	683b      	ldr	r3, [r7, #0]
 8000cb2:	685b      	ldr	r3, [r3, #4]
 8000cb4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000cb8:	2b00      	cmp	r3, #0
 8000cba:	d003      	beq.n	8000cc4 <HAL_GPIO_Init+0x200>
        {
          temp |= iocurrent;
 8000cbc:	693a      	ldr	r2, [r7, #16]
 8000cbe:	68fb      	ldr	r3, [r7, #12]
 8000cc0:	4313      	orrs	r3, r2
 8000cc2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000cc4:	4a2e      	ldr	r2, [pc, #184]	; (8000d80 <HAL_GPIO_Init+0x2bc>)
 8000cc6:	693b      	ldr	r3, [r7, #16]
 8000cc8:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8000cca:	4b2d      	ldr	r3, [pc, #180]	; (8000d80 <HAL_GPIO_Init+0x2bc>)
 8000ccc:	685b      	ldr	r3, [r3, #4]
 8000cce:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000cd0:	68fb      	ldr	r3, [r7, #12]
 8000cd2:	43db      	mvns	r3, r3
 8000cd4:	693a      	ldr	r2, [r7, #16]
 8000cd6:	4013      	ands	r3, r2
 8000cd8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000cda:	683b      	ldr	r3, [r7, #0]
 8000cdc:	685b      	ldr	r3, [r3, #4]
 8000cde:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	d003      	beq.n	8000cee <HAL_GPIO_Init+0x22a>
        {
          temp |= iocurrent;
 8000ce6:	693a      	ldr	r2, [r7, #16]
 8000ce8:	68fb      	ldr	r3, [r7, #12]
 8000cea:	4313      	orrs	r3, r2
 8000cec:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000cee:	4a24      	ldr	r2, [pc, #144]	; (8000d80 <HAL_GPIO_Init+0x2bc>)
 8000cf0:	693b      	ldr	r3, [r7, #16]
 8000cf2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
#ifdef CORE_CM0PLUS
        temp = EXTI->C2IMR1;
#else
        temp = EXTI->IMR1;
 8000cf4:	4b22      	ldr	r3, [pc, #136]	; (8000d80 <HAL_GPIO_Init+0x2bc>)
 8000cf6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000cfa:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 8000cfc:	68fb      	ldr	r3, [r7, #12]
 8000cfe:	43db      	mvns	r3, r3
 8000d00:	693a      	ldr	r2, [r7, #16]
 8000d02:	4013      	ands	r3, r2
 8000d04:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000d06:	683b      	ldr	r3, [r7, #0]
 8000d08:	685b      	ldr	r3, [r3, #4]
 8000d0a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	d003      	beq.n	8000d1a <HAL_GPIO_Init+0x256>
        {
          temp |= iocurrent;
 8000d12:	693a      	ldr	r2, [r7, #16]
 8000d14:	68fb      	ldr	r3, [r7, #12]
 8000d16:	4313      	orrs	r3, r2
 8000d18:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2IMR1 = temp;
#else
        EXTI->IMR1 = temp;
 8000d1a:	4a19      	ldr	r2, [pc, #100]	; (8000d80 <HAL_GPIO_Init+0x2bc>)
 8000d1c:	693b      	ldr	r3, [r7, #16]
 8000d1e:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
#endif /* CORE_CM0PLUS */

#ifdef CORE_CM0PLUS
        temp = EXTI->C2EMR1;
#else
        temp = EXTI->EMR1;
 8000d22:	4b17      	ldr	r3, [pc, #92]	; (8000d80 <HAL_GPIO_Init+0x2bc>)
 8000d24:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8000d28:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 8000d2a:	68fb      	ldr	r3, [r7, #12]
 8000d2c:	43db      	mvns	r3, r3
 8000d2e:	693a      	ldr	r2, [r7, #16]
 8000d30:	4013      	ands	r3, r2
 8000d32:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000d34:	683b      	ldr	r3, [r7, #0]
 8000d36:	685b      	ldr	r3, [r3, #4]
 8000d38:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	d003      	beq.n	8000d48 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8000d40:	693a      	ldr	r2, [r7, #16]
 8000d42:	68fb      	ldr	r3, [r7, #12]
 8000d44:	4313      	orrs	r3, r2
 8000d46:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2EMR1 = temp;
#else
        EXTI->EMR1 = temp;
 8000d48:	4a0d      	ldr	r2, [pc, #52]	; (8000d80 <HAL_GPIO_Init+0x2bc>)
 8000d4a:	693b      	ldr	r3, [r7, #16]
 8000d4c:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
#endif /* CORE_CM0PLUS */
      }
    }

    position++;
 8000d50:	697b      	ldr	r3, [r7, #20]
 8000d52:	3301      	adds	r3, #1
 8000d54:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000d56:	683b      	ldr	r3, [r7, #0]
 8000d58:	681a      	ldr	r2, [r3, #0]
 8000d5a:	697b      	ldr	r3, [r7, #20]
 8000d5c:	fa22 f303 	lsr.w	r3, r2, r3
 8000d60:	2b00      	cmp	r3, #0
 8000d62:	f47f aeb7 	bne.w	8000ad4 <HAL_GPIO_Init+0x10>
  }
}
 8000d66:	bf00      	nop
 8000d68:	bf00      	nop
 8000d6a:	371c      	adds	r7, #28
 8000d6c:	46bd      	mov	sp, r7
 8000d6e:	bc80      	pop	{r7}
 8000d70:	4770      	bx	lr
 8000d72:	bf00      	nop
 8000d74:	40010000 	.word	0x40010000
 8000d78:	48000400 	.word	0x48000400
 8000d7c:	48000800 	.word	0x48000800
 8000d80:	58000800 	.word	0x58000800

08000d84 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         backup domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8000d84:	b480      	push	{r7}
 8000d86:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8000d88:	4b04      	ldr	r3, [pc, #16]	; (8000d9c <HAL_PWR_EnableBkUpAccess+0x18>)
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	4a03      	ldr	r2, [pc, #12]	; (8000d9c <HAL_PWR_EnableBkUpAccess+0x18>)
 8000d8e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d92:	6013      	str	r3, [r2, #0]
}
 8000d94:	bf00      	nop
 8000d96:	46bd      	mov	sp, r7
 8000d98:	bc80      	pop	{r7}
 8000d9a:	4770      	bx	lr
 8000d9c:	58000400 	.word	0x58000400

08000da0 <LL_PWR_EnableBootC2>:
  *         refer to function @ref LL_PWR_IsActiveFlag_C2BOOTS().
  * @rmtoll CR4          C2BOOT        LL_PWR_EnableBootC2
  * @retval None
  */
__STATIC_INLINE void LL_PWR_EnableBootC2(void)
{
 8000da0:	b480      	push	{r7}
 8000da2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR4, PWR_CR4_C2BOOT);
 8000da4:	4b04      	ldr	r3, [pc, #16]	; (8000db8 <LL_PWR_EnableBootC2+0x18>)
 8000da6:	68db      	ldr	r3, [r3, #12]
 8000da8:	4a03      	ldr	r2, [pc, #12]	; (8000db8 <LL_PWR_EnableBootC2+0x18>)
 8000daa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000dae:	60d3      	str	r3, [r2, #12]
}
 8000db0:	bf00      	nop
 8000db2:	46bd      	mov	sp, r7
 8000db4:	bc80      	pop	{r7}
 8000db6:	4770      	bx	lr
 8000db8:	58000400 	.word	0x58000400

08000dbc <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWPWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8000dbc:	b480      	push	{r7}
 8000dbe:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 8000dc0:	4b03      	ldr	r3, [pc, #12]	; (8000dd0 <HAL_PWREx_GetVoltageRange+0x14>)
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 8000dc8:	4618      	mov	r0, r3
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	bc80      	pop	{r7}
 8000dce:	4770      	bx	lr
 8000dd0:	58000400 	.word	0x58000400

08000dd4 <HAL_PWREx_ReleaseCore>:
  *             This parameter can be one of the following values:
  *             @arg PWR_CORE_CPU2: Release the CPU2 from holding.
  * @retval None
  */
void HAL_PWREx_ReleaseCore(uint32_t CPU)
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	b082      	sub	sp, #8
 8000dd8:	af00      	add	r7, sp, #0
 8000dda:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_PWR_CORE_HOLD_RELEASE(CPU));

  LL_PWR_EnableBootC2();
 8000ddc:	f7ff ffe0 	bl	8000da0 <LL_PWR_EnableBootC2>
}
 8000de0:	bf00      	nop
 8000de2:	3708      	adds	r7, #8
 8000de4:	46bd      	mov	sp, r7
 8000de6:	bd80      	pop	{r7, pc}

08000de8 <LL_PWR_IsEnabledBkUpAccess>:
{
 8000de8:	b480      	push	{r7}
 8000dea:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)) ? 1UL : 0UL);
 8000dec:	4b06      	ldr	r3, [pc, #24]	; (8000e08 <LL_PWR_IsEnabledBkUpAccess+0x20>)
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000df4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000df8:	d101      	bne.n	8000dfe <LL_PWR_IsEnabledBkUpAccess+0x16>
 8000dfa:	2301      	movs	r3, #1
 8000dfc:	e000      	b.n	8000e00 <LL_PWR_IsEnabledBkUpAccess+0x18>
 8000dfe:	2300      	movs	r3, #0
}
 8000e00:	4618      	mov	r0, r3
 8000e02:	46bd      	mov	sp, r7
 8000e04:	bc80      	pop	{r7}
 8000e06:	4770      	bx	lr
 8000e08:	58000400 	.word	0x58000400

08000e0c <LL_RCC_HSE_EnableTcxo>:
{
 8000e0c:	b480      	push	{r7}
 8000e0e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 8000e10:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000e1a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000e1e:	6013      	str	r3, [r2, #0]
}
 8000e20:	bf00      	nop
 8000e22:	46bd      	mov	sp, r7
 8000e24:	bc80      	pop	{r7}
 8000e26:	4770      	bx	lr

08000e28 <LL_RCC_HSE_DisableTcxo>:
{
 8000e28:	b480      	push	{r7}
 8000e2a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 8000e2c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000e36:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8000e3a:	6013      	str	r3, [r2, #0]
}
 8000e3c:	bf00      	nop
 8000e3e:	46bd      	mov	sp, r7
 8000e40:	bc80      	pop	{r7}
 8000e42:	4770      	bx	lr

08000e44 <LL_RCC_HSE_IsEnabledDiv2>:
{
 8000e44:	b480      	push	{r7}
 8000e46:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8000e48:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000e4c:	681b      	ldr	r3, [r3, #0]
 8000e4e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000e52:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8000e56:	d101      	bne.n	8000e5c <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8000e58:	2301      	movs	r3, #1
 8000e5a:	e000      	b.n	8000e5e <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8000e5c:	2300      	movs	r3, #0
}
 8000e5e:	4618      	mov	r0, r3
 8000e60:	46bd      	mov	sp, r7
 8000e62:	bc80      	pop	{r7}
 8000e64:	4770      	bx	lr

08000e66 <LL_RCC_HSE_Enable>:
{
 8000e66:	b480      	push	{r7}
 8000e68:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8000e6a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000e74:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000e78:	6013      	str	r3, [r2, #0]
}
 8000e7a:	bf00      	nop
 8000e7c:	46bd      	mov	sp, r7
 8000e7e:	bc80      	pop	{r7}
 8000e80:	4770      	bx	lr

08000e82 <LL_RCC_HSE_Disable>:
{
 8000e82:	b480      	push	{r7}
 8000e84:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8000e86:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000e90:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000e94:	6013      	str	r3, [r2, #0]
}
 8000e96:	bf00      	nop
 8000e98:	46bd      	mov	sp, r7
 8000e9a:	bc80      	pop	{r7}
 8000e9c:	4770      	bx	lr

08000e9e <LL_RCC_HSE_IsReady>:
{
 8000e9e:	b480      	push	{r7}
 8000ea0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8000ea2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000eac:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8000eb0:	d101      	bne.n	8000eb6 <LL_RCC_HSE_IsReady+0x18>
 8000eb2:	2301      	movs	r3, #1
 8000eb4:	e000      	b.n	8000eb8 <LL_RCC_HSE_IsReady+0x1a>
 8000eb6:	2300      	movs	r3, #0
}
 8000eb8:	4618      	mov	r0, r3
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	bc80      	pop	{r7}
 8000ebe:	4770      	bx	lr

08000ec0 <LL_RCC_HSI_Enable>:
{
 8000ec0:	b480      	push	{r7}
 8000ec2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8000ec4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000ece:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ed2:	6013      	str	r3, [r2, #0]
}
 8000ed4:	bf00      	nop
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	bc80      	pop	{r7}
 8000eda:	4770      	bx	lr

08000edc <LL_RCC_HSI_Disable>:
{
 8000edc:	b480      	push	{r7}
 8000ede:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8000ee0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000eea:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000eee:	6013      	str	r3, [r2, #0]
}
 8000ef0:	bf00      	nop
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	bc80      	pop	{r7}
 8000ef6:	4770      	bx	lr

08000ef8 <LL_RCC_HSI_IsReady>:
{
 8000ef8:	b480      	push	{r7}
 8000efa:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8000efc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000f06:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000f0a:	d101      	bne.n	8000f10 <LL_RCC_HSI_IsReady+0x18>
 8000f0c:	2301      	movs	r3, #1
 8000f0e:	e000      	b.n	8000f12 <LL_RCC_HSI_IsReady+0x1a>
 8000f10:	2300      	movs	r3, #0
}
 8000f12:	4618      	mov	r0, r3
 8000f14:	46bd      	mov	sp, r7
 8000f16:	bc80      	pop	{r7}
 8000f18:	4770      	bx	lr

08000f1a <LL_RCC_HSI_SetCalibTrimming>:
{
 8000f1a:	b480      	push	{r7}
 8000f1c:	b083      	sub	sp, #12
 8000f1e:	af00      	add	r7, sp, #0
 8000f20:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8000f22:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000f26:	685b      	ldr	r3, [r3, #4]
 8000f28:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	061b      	lsls	r3, r3, #24
 8000f30:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000f34:	4313      	orrs	r3, r2
 8000f36:	604b      	str	r3, [r1, #4]
}
 8000f38:	bf00      	nop
 8000f3a:	370c      	adds	r7, #12
 8000f3c:	46bd      	mov	sp, r7
 8000f3e:	bc80      	pop	{r7}
 8000f40:	4770      	bx	lr

08000f42 <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 8000f42:	b480      	push	{r7}
 8000f44:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8000f46:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000f4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000f4e:	f003 0302 	and.w	r3, r3, #2
 8000f52:	2b02      	cmp	r3, #2
 8000f54:	d101      	bne.n	8000f5a <LL_RCC_LSE_IsReady+0x18>
 8000f56:	2301      	movs	r3, #1
 8000f58:	e000      	b.n	8000f5c <LL_RCC_LSE_IsReady+0x1a>
 8000f5a:	2300      	movs	r3, #0
}
 8000f5c:	4618      	mov	r0, r3
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	bc80      	pop	{r7}
 8000f62:	4770      	bx	lr

08000f64 <LL_RCC_LSI_Enable>:
  * @brief  Enable LSI Oscillator
  * @rmtoll CSR          LSION         LL_RCC_LSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI_Enable(void)
{
 8000f64:	b480      	push	{r7}
 8000f66:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSION);
 8000f68:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000f6c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000f70:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000f74:	f043 0301 	orr.w	r3, r3, #1
 8000f78:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8000f7c:	bf00      	nop
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	bc80      	pop	{r7}
 8000f82:	4770      	bx	lr

08000f84 <LL_RCC_LSI_Disable>:
  * @brief  Disable LSI Oscillator
  * @rmtoll CSR          LSION         LL_RCC_LSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI_Disable(void)
{
 8000f84:	b480      	push	{r7}
 8000f86:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 8000f88:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000f8c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000f90:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000f94:	f023 0301 	bic.w	r3, r3, #1
 8000f98:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8000f9c:	bf00      	nop
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	bc80      	pop	{r7}
 8000fa2:	4770      	bx	lr

08000fa4 <LL_RCC_LSI_IsReady>:
  * @brief  Check if LSI is Ready
  * @rmtoll CSR          LSIRDY        LL_RCC_LSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI_IsReady(void)
{
 8000fa4:	b480      	push	{r7}
 8000fa6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == (RCC_CSR_LSIRDY)) ? 1UL : 0UL);
 8000fa8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000fac:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000fb0:	f003 0302 	and.w	r3, r3, #2
 8000fb4:	2b02      	cmp	r3, #2
 8000fb6:	d101      	bne.n	8000fbc <LL_RCC_LSI_IsReady+0x18>
 8000fb8:	2301      	movs	r3, #1
 8000fba:	e000      	b.n	8000fbe <LL_RCC_LSI_IsReady+0x1a>
 8000fbc:	2300      	movs	r3, #0
}
 8000fbe:	4618      	mov	r0, r3
 8000fc0:	46bd      	mov	sp, r7
 8000fc2:	bc80      	pop	{r7}
 8000fc4:	4770      	bx	lr

08000fc6 <LL_RCC_MSI_Enable>:
  * @brief  Enable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Enable(void)
{
 8000fc6:	b480      	push	{r7}
 8000fc8:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8000fca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000fd4:	f043 0301 	orr.w	r3, r3, #1
 8000fd8:	6013      	str	r3, [r2, #0]
}
 8000fda:	bf00      	nop
 8000fdc:	46bd      	mov	sp, r7
 8000fde:	bc80      	pop	{r7}
 8000fe0:	4770      	bx	lr

08000fe2 <LL_RCC_MSI_Disable>:
  * @brief  Disable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Disable(void)
{
 8000fe2:	b480      	push	{r7}
 8000fe4:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8000fe6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000ff0:	f023 0301 	bic.w	r3, r3, #1
 8000ff4:	6013      	str	r3, [r2, #0]
}
 8000ff6:	bf00      	nop
 8000ff8:	46bd      	mov	sp, r7
 8000ffa:	bc80      	pop	{r7}
 8000ffc:	4770      	bx	lr

08000ffe <LL_RCC_MSI_IsReady>:
  * @brief  Check if MSI oscillator Ready
  * @rmtoll CR           MSIRDY        LL_RCC_MSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsReady(void)
{
 8000ffe:	b480      	push	{r7}
 8001000:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8001002:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	f003 0302 	and.w	r3, r3, #2
 800100c:	2b02      	cmp	r3, #2
 800100e:	d101      	bne.n	8001014 <LL_RCC_MSI_IsReady+0x16>
 8001010:	2301      	movs	r3, #1
 8001012:	e000      	b.n	8001016 <LL_RCC_MSI_IsReady+0x18>
 8001014:	2300      	movs	r3, #0
}
 8001016:	4618      	mov	r0, r3
 8001018:	46bd      	mov	sp, r7
 800101a:	bc80      	pop	{r7}
 800101c:	4770      	bx	lr

0800101e <LL_RCC_MSI_IsEnabledRangeSelect>:
  * @brief  Check if MSI clock range is selected with MSIRANGE register
  * @rmtoll CR           MSIRGSEL      LL_RCC_MSI_IsEnabledRangeSelect
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsEnabledRangeSelect(void)
{
 800101e:	b480      	push	{r7}
 8001020:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == (RCC_CR_MSIRGSEL)) ? 1UL : 0UL);
 8001022:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	f003 0308 	and.w	r3, r3, #8
 800102c:	2b08      	cmp	r3, #8
 800102e:	d101      	bne.n	8001034 <LL_RCC_MSI_IsEnabledRangeSelect+0x16>
 8001030:	2301      	movs	r3, #1
 8001032:	e000      	b.n	8001036 <LL_RCC_MSI_IsEnabledRangeSelect+0x18>
 8001034:	2300      	movs	r3, #0
}
 8001036:	4618      	mov	r0, r3
 8001038:	46bd      	mov	sp, r7
 800103a:	bc80      	pop	{r7}
 800103c:	4770      	bx	lr

0800103e <LL_RCC_MSI_GetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_9
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRange(void)
{
 800103e:	b480      	push	{r7}
 8001040:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CR, RCC_CR_MSIRANGE));
 8001042:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 800104c:	4618      	mov	r0, r3
 800104e:	46bd      	mov	sp, r7
 8001050:	bc80      	pop	{r7}
 8001052:	4770      	bx	lr

08001054 <LL_RCC_MSI_GetRangeAfterStandby>:
  *         @arg @ref LL_RCC_MSISRANGE_5
  *         @arg @ref LL_RCC_MSISRANGE_6
  *         @arg @ref LL_RCC_MSISRANGE_7
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRangeAfterStandby(void)
{
 8001054:	b480      	push	{r7}
 8001056:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 8001058:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800105c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001060:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
}
 8001064:	4618      	mov	r0, r3
 8001066:	46bd      	mov	sp, r7
 8001068:	bc80      	pop	{r7}
 800106a:	4770      	bx	lr

0800106c <LL_RCC_MSI_SetCalibTrimming>:
  * @rmtoll ICSCR        MSITRIM       LL_RCC_MSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 255
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetCalibTrimming(uint32_t Value)
{
 800106c:	b480      	push	{r7}
 800106e:	b083      	sub	sp, #12
 8001070:	af00      	add	r7, sp, #0
 8001072:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8001074:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001078:	685b      	ldr	r3, [r3, #4]
 800107a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	021b      	lsls	r3, r3, #8
 8001082:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001086:	4313      	orrs	r3, r2
 8001088:	604b      	str	r3, [r1, #4]
}
 800108a:	bf00      	nop
 800108c:	370c      	adds	r7, #12
 800108e:	46bd      	mov	sp, r7
 8001090:	bc80      	pop	{r7}
 8001092:	4770      	bx	lr

08001094 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8001094:	b480      	push	{r7}
 8001096:	b083      	sub	sp, #12
 8001098:	af00      	add	r7, sp, #0
 800109a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 800109c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80010a0:	689b      	ldr	r3, [r3, #8]
 80010a2:	f023 0203 	bic.w	r2, r3, #3
 80010a6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	4313      	orrs	r3, r2
 80010ae:	608b      	str	r3, [r1, #8]
}
 80010b0:	bf00      	nop
 80010b2:	370c      	adds	r7, #12
 80010b4:	46bd      	mov	sp, r7
 80010b6:	bc80      	pop	{r7}
 80010b8:	4770      	bx	lr

080010ba <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 80010ba:	b480      	push	{r7}
 80010bc:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80010be:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80010c2:	689b      	ldr	r3, [r3, #8]
 80010c4:	f003 030c 	and.w	r3, r3, #12
}
 80010c8:	4618      	mov	r0, r3
 80010ca:	46bd      	mov	sp, r7
 80010cc:	bc80      	pop	{r7}
 80010ce:	4770      	bx	lr

080010d0 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 80010d0:	b480      	push	{r7}
 80010d2:	b083      	sub	sp, #12
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 80010d8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80010dc:	689b      	ldr	r3, [r3, #8]
 80010de:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80010e2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	4313      	orrs	r3, r2
 80010ea:	608b      	str	r3, [r1, #8]
}
 80010ec:	bf00      	nop
 80010ee:	370c      	adds	r7, #12
 80010f0:	46bd      	mov	sp, r7
 80010f2:	bc80      	pop	{r7}
 80010f4:	4770      	bx	lr

080010f6 <LL_C2_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_C2_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 80010f6:	b480      	push	{r7}
 80010f8:	b083      	sub	sp, #12
 80010fa:	af00      	add	r7, sp, #0
 80010fc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 80010fe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001102:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001106:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800110a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	4313      	orrs	r3, r2
 8001112:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8001116:	bf00      	nop
 8001118:	370c      	adds	r7, #12
 800111a:	46bd      	mov	sp, r7
 800111c:	bc80      	pop	{r7}
 800111e:	4770      	bx	lr

08001120 <LL_RCC_SetAHB3Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHB3Prescaler(uint32_t Prescaler)
{
 8001120:	b480      	push	{r7}
 8001122:	b083      	sub	sp, #12
 8001124:	af00      	add	r7, sp, #0
 8001126:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8001128:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800112c:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001130:	f023 020f 	bic.w	r2, r3, #15
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	091b      	lsrs	r3, r3, #4
 8001138:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800113c:	4313      	orrs	r3, r2
 800113e:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8001142:	bf00      	nop
 8001144:	370c      	adds	r7, #12
 8001146:	46bd      	mov	sp, r7
 8001148:	bc80      	pop	{r7}
 800114a:	4770      	bx	lr

0800114c <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 800114c:	b480      	push	{r7}
 800114e:	b083      	sub	sp, #12
 8001150:	af00      	add	r7, sp, #0
 8001152:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8001154:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001158:	689b      	ldr	r3, [r3, #8]
 800115a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800115e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	4313      	orrs	r3, r2
 8001166:	608b      	str	r3, [r1, #8]
}
 8001168:	bf00      	nop
 800116a:	370c      	adds	r7, #12
 800116c:	46bd      	mov	sp, r7
 800116e:	bc80      	pop	{r7}
 8001170:	4770      	bx	lr

08001172 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8001172:	b480      	push	{r7}
 8001174:	b083      	sub	sp, #12
 8001176:	af00      	add	r7, sp, #0
 8001178:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 800117a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800117e:	689b      	ldr	r3, [r3, #8]
 8001180:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001184:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	4313      	orrs	r3, r2
 800118c:	608b      	str	r3, [r1, #8]
}
 800118e:	bf00      	nop
 8001190:	370c      	adds	r7, #12
 8001192:	46bd      	mov	sp, r7
 8001194:	bc80      	pop	{r7}
 8001196:	4770      	bx	lr

08001198 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 8001198:	b480      	push	{r7}
 800119a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 800119c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80011a0:	689b      	ldr	r3, [r3, #8]
 80011a2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 80011a6:	4618      	mov	r0, r3
 80011a8:	46bd      	mov	sp, r7
 80011aa:	bc80      	pop	{r7}
 80011ac:	4770      	bx	lr

080011ae <LL_RCC_GetAHB3Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHB3Prescaler(void)
{
 80011ae:	b480      	push	{r7}
 80011b0:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 80011b2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80011b6:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80011ba:	011b      	lsls	r3, r3, #4
 80011bc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 80011c0:	4618      	mov	r0, r3
 80011c2:	46bd      	mov	sp, r7
 80011c4:	bc80      	pop	{r7}
 80011c6:	4770      	bx	lr

080011c8 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 80011c8:	b480      	push	{r7}
 80011ca:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 80011cc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80011d0:	689b      	ldr	r3, [r3, #8]
 80011d2:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 80011d6:	4618      	mov	r0, r3
 80011d8:	46bd      	mov	sp, r7
 80011da:	bc80      	pop	{r7}
 80011dc:	4770      	bx	lr

080011de <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 80011de:	b480      	push	{r7}
 80011e0:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 80011e2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80011e6:	689b      	ldr	r3, [r3, #8]
 80011e8:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 80011ec:	4618      	mov	r0, r3
 80011ee:	46bd      	mov	sp, r7
 80011f0:	bc80      	pop	{r7}
 80011f2:	4770      	bx	lr

080011f4 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 80011f4:	b480      	push	{r7}
 80011f6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 80011f8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001202:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001206:	6013      	str	r3, [r2, #0]
}
 8001208:	bf00      	nop
 800120a:	46bd      	mov	sp, r7
 800120c:	bc80      	pop	{r7}
 800120e:	4770      	bx	lr

08001210 <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 8001210:	b480      	push	{r7}
 8001212:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8001214:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800121e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001222:	6013      	str	r3, [r2, #0]
}
 8001224:	bf00      	nop
 8001226:	46bd      	mov	sp, r7
 8001228:	bc80      	pop	{r7}
 800122a:	4770      	bx	lr

0800122c <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 800122c:	b480      	push	{r7}
 800122e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8001230:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800123a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800123e:	d101      	bne.n	8001244 <LL_RCC_PLL_IsReady+0x18>
 8001240:	2301      	movs	r3, #1
 8001242:	e000      	b.n	8001246 <LL_RCC_PLL_IsReady+0x1a>
 8001244:	2300      	movs	r3, #0
}
 8001246:	4618      	mov	r0, r3
 8001248:	46bd      	mov	sp, r7
 800124a:	bc80      	pop	{r7}
 800124c:	4770      	bx	lr

0800124e <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 800124e:	b480      	push	{r7}
 8001250:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8001252:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001256:	68db      	ldr	r3, [r3, #12]
 8001258:	0a1b      	lsrs	r3, r3, #8
 800125a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 800125e:	4618      	mov	r0, r3
 8001260:	46bd      	mov	sp, r7
 8001262:	bc80      	pop	{r7}
 8001264:	4770      	bx	lr

08001266 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8001266:	b480      	push	{r7}
 8001268:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 800126a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800126e:	68db      	ldr	r3, [r3, #12]
 8001270:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 8001274:	4618      	mov	r0, r3
 8001276:	46bd      	mov	sp, r7
 8001278:	bc80      	pop	{r7}
 800127a:	4770      	bx	lr

0800127c <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 800127c:	b480      	push	{r7}
 800127e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8001280:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001284:	68db      	ldr	r3, [r3, #12]
 8001286:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 800128a:	4618      	mov	r0, r3
 800128c:	46bd      	mov	sp, r7
 800128e:	bc80      	pop	{r7}
 8001290:	4770      	bx	lr

08001292 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8001292:	b480      	push	{r7}
 8001294:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8001296:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800129a:	68db      	ldr	r3, [r3, #12]
 800129c:	f003 0303 	and.w	r3, r3, #3
}
 80012a0:	4618      	mov	r0, r3
 80012a2:	46bd      	mov	sp, r7
 80012a4:	bc80      	pop	{r7}
 80012a6:	4770      	bx	lr

080012a8 <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 80012a8:	b480      	push	{r7}
 80012aa:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 80012ac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80012b0:	689b      	ldr	r3, [r3, #8]
 80012b2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80012b6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80012ba:	d101      	bne.n	80012c0 <LL_RCC_IsActiveFlag_HPRE+0x18>
 80012bc:	2301      	movs	r3, #1
 80012be:	e000      	b.n	80012c2 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 80012c0:	2300      	movs	r3, #0
}
 80012c2:	4618      	mov	r0, r3
 80012c4:	46bd      	mov	sp, r7
 80012c6:	bc80      	pop	{r7}
 80012c8:	4770      	bx	lr

080012ca <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 80012ca:	b480      	push	{r7}
 80012cc:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 80012ce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80012d2:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80012d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012da:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80012de:	d101      	bne.n	80012e4 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 80012e0:	2301      	movs	r3, #1
 80012e2:	e000      	b.n	80012e6 <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 80012e4:	2300      	movs	r3, #0
}
 80012e6:	4618      	mov	r0, r3
 80012e8:	46bd      	mov	sp, r7
 80012ea:	bc80      	pop	{r7}
 80012ec:	4770      	bx	lr

080012ee <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK3 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 80012ee:	b480      	push	{r7}
 80012f0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 80012f2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80012f6:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80012fa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80012fe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001302:	d101      	bne.n	8001308 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8001304:	2301      	movs	r3, #1
 8001306:	e000      	b.n	800130a <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8001308:	2300      	movs	r3, #0
}
 800130a:	4618      	mov	r0, r3
 800130c:	46bd      	mov	sp, r7
 800130e:	bc80      	pop	{r7}
 8001310:	4770      	bx	lr

08001312 <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 8001312:	b480      	push	{r7}
 8001314:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8001316:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800131a:	689b      	ldr	r3, [r3, #8]
 800131c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001320:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001324:	d101      	bne.n	800132a <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8001326:	2301      	movs	r3, #1
 8001328:	e000      	b.n	800132c <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 800132a:	2300      	movs	r3, #0
}
 800132c:	4618      	mov	r0, r3
 800132e:	46bd      	mov	sp, r7
 8001330:	bc80      	pop	{r7}
 8001332:	4770      	bx	lr

08001334 <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 8001334:	b480      	push	{r7}
 8001336:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8001338:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800133c:	689b      	ldr	r3, [r3, #8]
 800133e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001342:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8001346:	d101      	bne.n	800134c <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8001348:	2301      	movs	r3, #1
 800134a:	e000      	b.n	800134e <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 800134c:	2300      	movs	r3, #0
}
 800134e:	4618      	mov	r0, r3
 8001350:	46bd      	mov	sp, r7
 8001352:	bc80      	pop	{r7}
 8001354:	4770      	bx	lr
	...

08001358 <HAL_RCC_OscConfig>:
  *         contains the configuration information for the RCC Oscillators.
  * @note   The PLL is not disabled when used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	b088      	sub	sp, #32
 800135c:	af00      	add	r7, sp, #0
 800135e:	6078      	str	r0, [r7, #4]
  uint32_t sysclk_source;
  uint32_t pll_config;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	2b00      	cmp	r3, #0
 8001364:	d101      	bne.n	800136a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001366:	2301      	movs	r3, #1
 8001368:	e36f      	b.n	8001a4a <HAL_RCC_OscConfig+0x6f2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800136a:	f7ff fea6 	bl	80010ba <LL_RCC_GetSysClkSource>
 800136e:	61f8      	str	r0, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001370:	f7ff ff8f 	bl	8001292 <LL_RCC_PLL_GetMainSource>
 8001374:	61b8      	str	r0, [r7, #24]

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	f003 0320 	and.w	r3, r3, #32
 800137e:	2b00      	cmp	r3, #0
 8001380:	f000 80c4 	beq.w	800150c <HAL_RCC_OscConfig+0x1b4>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSI_CALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8001384:	69fb      	ldr	r3, [r7, #28]
 8001386:	2b00      	cmp	r3, #0
 8001388:	d005      	beq.n	8001396 <HAL_RCC_OscConfig+0x3e>
 800138a:	69fb      	ldr	r3, [r7, #28]
 800138c:	2b0c      	cmp	r3, #12
 800138e:	d176      	bne.n	800147e <HAL_RCC_OscConfig+0x126>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001390:	69bb      	ldr	r3, [r7, #24]
 8001392:	2b01      	cmp	r3, #1
 8001394:	d173      	bne.n	800147e <HAL_RCC_OscConfig+0x126>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	6a1b      	ldr	r3, [r3, #32]
 800139a:	2b00      	cmp	r3, #0
 800139c:	d101      	bne.n	80013a2 <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 800139e:	2301      	movs	r3, #1
 80013a0:	e353      	b.n	8001a4a <HAL_RCC_OscConfig+0x6f2>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB3 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80013a6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	f003 0308 	and.w	r3, r3, #8
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d005      	beq.n	80013c0 <HAL_RCC_OscConfig+0x68>
 80013b4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80013be:	e006      	b.n	80013ce <HAL_RCC_OscConfig+0x76>
 80013c0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80013c4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80013c8:	091b      	lsrs	r3, r3, #4
 80013ca:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80013ce:	4293      	cmp	r3, r2
 80013d0:	d222      	bcs.n	8001418 <HAL_RCC_OscConfig+0xc0>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013d6:	4618      	mov	r0, r3
 80013d8:	f000 fd5a 	bl	8001e90 <RCC_SetFlashLatencyFromMSIRange>
 80013dc:	4603      	mov	r3, r0
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d001      	beq.n	80013e6 <HAL_RCC_OscConfig+0x8e>
          {
            return HAL_ERROR;
 80013e2:	2301      	movs	r3, #1
 80013e4:	e331      	b.n	8001a4a <HAL_RCC_OscConfig+0x6f2>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80013e6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80013f0:	f043 0308 	orr.w	r3, r3, #8
 80013f4:	6013      	str	r3, [r2, #0]
 80013f6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001404:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001408:	4313      	orrs	r3, r2
 800140a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001410:	4618      	mov	r0, r3
 8001412:	f7ff fe2b 	bl	800106c <LL_RCC_MSI_SetCalibTrimming>
 8001416:	e021      	b.n	800145c <HAL_RCC_OscConfig+0x104>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range. */
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001418:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001422:	f043 0308 	orr.w	r3, r3, #8
 8001426:	6013      	str	r3, [r2, #0]
 8001428:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001436:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800143a:	4313      	orrs	r3, r2
 800143c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001442:	4618      	mov	r0, r3
 8001444:	f7ff fe12 	bl	800106c <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800144c:	4618      	mov	r0, r3
 800144e:	f000 fd1f 	bl	8001e90 <RCC_SetFlashLatencyFromMSIRange>
 8001452:	4603      	mov	r3, r0
 8001454:	2b00      	cmp	r3, #0
 8001456:	d001      	beq.n	800145c <HAL_RCC_OscConfig+0x104>
          {
            return HAL_ERROR;
 8001458:	2301      	movs	r3, #1
 800145a:	e2f6      	b.n	8001a4a <HAL_RCC_OscConfig+0x6f2>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 800145c:	f000 fce0 	bl	8001e20 <HAL_RCC_GetHCLKFreq>
 8001460:	4603      	mov	r3, r0
 8001462:	4aa7      	ldr	r2, [pc, #668]	; (8001700 <HAL_RCC_OscConfig+0x3a8>)
 8001464:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings */
        status = HAL_InitTick(uwTickPrio);
 8001466:	4ba7      	ldr	r3, [pc, #668]	; (8001704 <HAL_RCC_OscConfig+0x3ac>)
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	4618      	mov	r0, r3
 800146c:	f7ff f9f2 	bl	8000854 <HAL_InitTick>
 8001470:	4603      	mov	r3, r0
 8001472:	74fb      	strb	r3, [r7, #19]
        if (status != HAL_OK)
 8001474:	7cfb      	ldrb	r3, [r7, #19]
 8001476:	2b00      	cmp	r3, #0
 8001478:	d047      	beq.n	800150a <HAL_RCC_OscConfig+0x1b2>
        {
          return status;
 800147a:	7cfb      	ldrb	r3, [r7, #19]
 800147c:	e2e5      	b.n	8001a4a <HAL_RCC_OscConfig+0x6f2>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	6a1b      	ldr	r3, [r3, #32]
 8001482:	2b00      	cmp	r3, #0
 8001484:	d02c      	beq.n	80014e0 <HAL_RCC_OscConfig+0x188>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001486:	f7ff fd9e 	bl	8000fc6 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 800148a:	f7ff fa2f 	bl	80008ec <HAL_GetTick>
 800148e:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8001490:	e008      	b.n	80014a4 <HAL_RCC_OscConfig+0x14c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001492:	f7ff fa2b 	bl	80008ec <HAL_GetTick>
 8001496:	4602      	mov	r2, r0
 8001498:	697b      	ldr	r3, [r7, #20]
 800149a:	1ad3      	subs	r3, r2, r3
 800149c:	2b02      	cmp	r3, #2
 800149e:	d901      	bls.n	80014a4 <HAL_RCC_OscConfig+0x14c>
          {
            return HAL_TIMEOUT;
 80014a0:	2303      	movs	r3, #3
 80014a2:	e2d2      	b.n	8001a4a <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_MSI_IsReady() == 0U)
 80014a4:	f7ff fdab 	bl	8000ffe <LL_RCC_MSI_IsReady>
 80014a8:	4603      	mov	r3, r0
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d0f1      	beq.n	8001492 <HAL_RCC_OscConfig+0x13a>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range. */
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80014ae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80014b8:	f043 0308 	orr.w	r3, r3, #8
 80014bc:	6013      	str	r3, [r2, #0]
 80014be:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014cc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80014d0:	4313      	orrs	r3, r2
 80014d2:	600b      	str	r3, [r1, #0]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value. */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014d8:	4618      	mov	r0, r3
 80014da:	f7ff fdc7 	bl	800106c <LL_RCC_MSI_SetCalibTrimming>
 80014de:	e015      	b.n	800150c <HAL_RCC_OscConfig+0x1b4>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80014e0:	f7ff fd7f 	bl	8000fe2 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 80014e4:	f7ff fa02 	bl	80008ec <HAL_GetTick>
 80014e8:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 80014ea:	e008      	b.n	80014fe <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80014ec:	f7ff f9fe 	bl	80008ec <HAL_GetTick>
 80014f0:	4602      	mov	r2, r0
 80014f2:	697b      	ldr	r3, [r7, #20]
 80014f4:	1ad3      	subs	r3, r2, r3
 80014f6:	2b02      	cmp	r3, #2
 80014f8:	d901      	bls.n	80014fe <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 80014fa:	2303      	movs	r3, #3
 80014fc:	e2a5      	b.n	8001a4a <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_MSI_IsReady() != 0U)
 80014fe:	f7ff fd7e 	bl	8000ffe <LL_RCC_MSI_IsReady>
 8001502:	4603      	mov	r3, r0
 8001504:	2b00      	cmp	r3, #0
 8001506:	d1f1      	bne.n	80014ec <HAL_RCC_OscConfig+0x194>
 8001508:	e000      	b.n	800150c <HAL_RCC_OscConfig+0x1b4>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 800150a:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	f003 0301 	and.w	r3, r3, #1
 8001514:	2b00      	cmp	r3, #0
 8001516:	d058      	beq.n	80015ca <HAL_RCC_OscConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8001518:	69fb      	ldr	r3, [r7, #28]
 800151a:	2b08      	cmp	r3, #8
 800151c:	d005      	beq.n	800152a <HAL_RCC_OscConfig+0x1d2>
 800151e:	69fb      	ldr	r3, [r7, #28]
 8001520:	2b0c      	cmp	r3, #12
 8001522:	d108      	bne.n	8001536 <HAL_RCC_OscConfig+0x1de>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001524:	69bb      	ldr	r3, [r7, #24]
 8001526:	2b03      	cmp	r3, #3
 8001528:	d105      	bne.n	8001536 <HAL_RCC_OscConfig+0x1de>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	685b      	ldr	r3, [r3, #4]
 800152e:	2b00      	cmp	r3, #0
 8001530:	d14b      	bne.n	80015ca <HAL_RCC_OscConfig+0x272>
      {
        return HAL_ERROR;
 8001532:	2301      	movs	r3, #1
 8001534:	e289      	b.n	8001a4a <HAL_RCC_OscConfig+0x6f2>
      /* Set the new HSE configuration ---------------------------------------*/
      /* Check HSE division factor */
      assert_param(IS_RCC_HSEDIV(RCC_OscInitStruct->HSEDiv));

      /* Set HSE division factor */
      MODIFY_REG(RCC->CR, RCC_CR_HSEPRE, RCC_OscInitStruct->HSEDiv);
 8001536:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	689b      	ldr	r3, [r3, #8]
 8001544:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001548:	4313      	orrs	r3, r2
 800154a:	600b      	str	r3, [r1, #0]

      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	685b      	ldr	r3, [r3, #4]
 8001550:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001554:	d102      	bne.n	800155c <HAL_RCC_OscConfig+0x204>
 8001556:	f7ff fc86 	bl	8000e66 <LL_RCC_HSE_Enable>
 800155a:	e00d      	b.n	8001578 <HAL_RCC_OscConfig+0x220>
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	685b      	ldr	r3, [r3, #4]
 8001560:	f5b3 1f04 	cmp.w	r3, #2162688	; 0x210000
 8001564:	d104      	bne.n	8001570 <HAL_RCC_OscConfig+0x218>
 8001566:	f7ff fc51 	bl	8000e0c <LL_RCC_HSE_EnableTcxo>
 800156a:	f7ff fc7c 	bl	8000e66 <LL_RCC_HSE_Enable>
 800156e:	e003      	b.n	8001578 <HAL_RCC_OscConfig+0x220>
 8001570:	f7ff fc87 	bl	8000e82 <LL_RCC_HSE_Disable>
 8001574:	f7ff fc58 	bl	8000e28 <LL_RCC_HSE_DisableTcxo>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	685b      	ldr	r3, [r3, #4]
 800157c:	2b00      	cmp	r3, #0
 800157e:	d012      	beq.n	80015a6 <HAL_RCC_OscConfig+0x24e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001580:	f7ff f9b4 	bl	80008ec <HAL_GetTick>
 8001584:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 8001586:	e008      	b.n	800159a <HAL_RCC_OscConfig+0x242>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001588:	f7ff f9b0 	bl	80008ec <HAL_GetTick>
 800158c:	4602      	mov	r2, r0
 800158e:	697b      	ldr	r3, [r7, #20]
 8001590:	1ad3      	subs	r3, r2, r3
 8001592:	2b64      	cmp	r3, #100	; 0x64
 8001594:	d901      	bls.n	800159a <HAL_RCC_OscConfig+0x242>
          {
            return HAL_TIMEOUT;
 8001596:	2303      	movs	r3, #3
 8001598:	e257      	b.n	8001a4a <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSE_IsReady() == 0U)
 800159a:	f7ff fc80 	bl	8000e9e <LL_RCC_HSE_IsReady>
 800159e:	4603      	mov	r3, r0
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d0f1      	beq.n	8001588 <HAL_RCC_OscConfig+0x230>
 80015a4:	e011      	b.n	80015ca <HAL_RCC_OscConfig+0x272>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015a6:	f7ff f9a1 	bl	80008ec <HAL_GetTick>
 80015aa:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 80015ac:	e008      	b.n	80015c0 <HAL_RCC_OscConfig+0x268>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80015ae:	f7ff f99d 	bl	80008ec <HAL_GetTick>
 80015b2:	4602      	mov	r2, r0
 80015b4:	697b      	ldr	r3, [r7, #20]
 80015b6:	1ad3      	subs	r3, r2, r3
 80015b8:	2b64      	cmp	r3, #100	; 0x64
 80015ba:	d901      	bls.n	80015c0 <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 80015bc:	2303      	movs	r3, #3
 80015be:	e244      	b.n	8001a4a <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSE_IsReady() != 0U)
 80015c0:	f7ff fc6d 	bl	8000e9e <LL_RCC_HSE_IsReady>
 80015c4:	4603      	mov	r3, r0
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d1f1      	bne.n	80015ae <HAL_RCC_OscConfig+0x256>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	f003 0302 	and.w	r3, r3, #2
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d046      	beq.n	8001664 <HAL_RCC_OscConfig+0x30c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 80015d6:	69fb      	ldr	r3, [r7, #28]
 80015d8:	2b04      	cmp	r3, #4
 80015da:	d005      	beq.n	80015e8 <HAL_RCC_OscConfig+0x290>
 80015dc:	69fb      	ldr	r3, [r7, #28]
 80015de:	2b0c      	cmp	r3, #12
 80015e0:	d10e      	bne.n	8001600 <HAL_RCC_OscConfig+0x2a8>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 80015e2:	69bb      	ldr	r3, [r7, #24]
 80015e4:	2b02      	cmp	r3, #2
 80015e6:	d10b      	bne.n	8001600 <HAL_RCC_OscConfig+0x2a8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	691b      	ldr	r3, [r3, #16]
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d101      	bne.n	80015f4 <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 80015f0:	2301      	movs	r3, #1
 80015f2:	e22a      	b.n	8001a4a <HAL_RCC_OscConfig+0x6f2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	695b      	ldr	r3, [r3, #20]
 80015f8:	4618      	mov	r0, r3
 80015fa:	f7ff fc8e 	bl	8000f1a <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 80015fe:	e031      	b.n	8001664 <HAL_RCC_OscConfig+0x30c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	691b      	ldr	r3, [r3, #16]
 8001604:	2b00      	cmp	r3, #0
 8001606:	d019      	beq.n	800163c <HAL_RCC_OscConfig+0x2e4>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001608:	f7ff fc5a 	bl	8000ec0 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800160c:	f7ff f96e 	bl	80008ec <HAL_GetTick>
 8001610:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 8001612:	e008      	b.n	8001626 <HAL_RCC_OscConfig+0x2ce>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001614:	f7ff f96a 	bl	80008ec <HAL_GetTick>
 8001618:	4602      	mov	r2, r0
 800161a:	697b      	ldr	r3, [r7, #20]
 800161c:	1ad3      	subs	r3, r2, r3
 800161e:	2b02      	cmp	r3, #2
 8001620:	d901      	bls.n	8001626 <HAL_RCC_OscConfig+0x2ce>
          {
            return HAL_TIMEOUT;
 8001622:	2303      	movs	r3, #3
 8001624:	e211      	b.n	8001a4a <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSI_IsReady() == 0U)
 8001626:	f7ff fc67 	bl	8000ef8 <LL_RCC_HSI_IsReady>
 800162a:	4603      	mov	r3, r0
 800162c:	2b00      	cmp	r3, #0
 800162e:	d0f1      	beq.n	8001614 <HAL_RCC_OscConfig+0x2bc>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	695b      	ldr	r3, [r3, #20]
 8001634:	4618      	mov	r0, r3
 8001636:	f7ff fc70 	bl	8000f1a <LL_RCC_HSI_SetCalibTrimming>
 800163a:	e013      	b.n	8001664 <HAL_RCC_OscConfig+0x30c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800163c:	f7ff fc4e 	bl	8000edc <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001640:	f7ff f954 	bl	80008ec <HAL_GetTick>
 8001644:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 8001646:	e008      	b.n	800165a <HAL_RCC_OscConfig+0x302>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001648:	f7ff f950 	bl	80008ec <HAL_GetTick>
 800164c:	4602      	mov	r2, r0
 800164e:	697b      	ldr	r3, [r7, #20]
 8001650:	1ad3      	subs	r3, r2, r3
 8001652:	2b02      	cmp	r3, #2
 8001654:	d901      	bls.n	800165a <HAL_RCC_OscConfig+0x302>
          {
            return HAL_TIMEOUT;
 8001656:	2303      	movs	r3, #3
 8001658:	e1f7      	b.n	8001a4a <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSI_IsReady() != 0U)
 800165a:	f7ff fc4d 	bl	8000ef8 <LL_RCC_HSI_IsReady>
 800165e:	4603      	mov	r3, r0
 8001660:	2b00      	cmp	r3, #0
 8001662:	d1f1      	bne.n	8001648 <HAL_RCC_OscConfig+0x2f0>
      }
    }
  }

  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	f003 0308 	and.w	r3, r3, #8
 800166c:	2b00      	cmp	r3, #0
 800166e:	d06e      	beq.n	800174e <HAL_RCC_OscConfig+0x3f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	699b      	ldr	r3, [r3, #24]
 8001674:	2b00      	cmp	r3, #0
 8001676:	d056      	beq.n	8001726 <HAL_RCC_OscConfig+0x3ce>
    {
      uint32_t csr_temp = RCC->CSR;
 8001678:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800167c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001680:	60fb      	str	r3, [r7, #12]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPRE))
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	69da      	ldr	r2, [r3, #28]
 8001686:	68fb      	ldr	r3, [r7, #12]
 8001688:	f003 0310 	and.w	r3, r3, #16
 800168c:	429a      	cmp	r2, r3
 800168e:	d031      	beq.n	80016f4 <HAL_RCC_OscConfig+0x39c>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8001690:	68fb      	ldr	r3, [r7, #12]
 8001692:	f003 0302 	and.w	r3, r3, #2
 8001696:	2b00      	cmp	r3, #0
 8001698:	d006      	beq.n	80016a8 <HAL_RCC_OscConfig+0x350>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 800169a:	68fb      	ldr	r3, [r7, #12]
 800169c:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d101      	bne.n	80016a8 <HAL_RCC_OscConfig+0x350>
        {
          /* If LSIRDY is set while LSION is not enabled,
             LSIPRE can't be updated */
          return HAL_ERROR;
 80016a4:	2301      	movs	r3, #1
 80016a6:	e1d0      	b.n	8001a4a <HAL_RCC_OscConfig+0x6f2>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPRE */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 80016a8:	68fb      	ldr	r3, [r7, #12]
 80016aa:	f003 0301 	and.w	r3, r3, #1
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d013      	beq.n	80016da <HAL_RCC_OscConfig+0x382>
        {
          __HAL_RCC_LSI_DISABLE();
 80016b2:	f7ff fc67 	bl	8000f84 <LL_RCC_LSI_Disable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80016b6:	f7ff f919 	bl	80008ec <HAL_GetTick>
 80016ba:	6178      	str	r0, [r7, #20]

          /* Wait till LSI is disabled */
          while (LL_RCC_LSI_IsReady() != 0U)
 80016bc:	e008      	b.n	80016d0 <HAL_RCC_OscConfig+0x378>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80016be:	f7ff f915 	bl	80008ec <HAL_GetTick>
 80016c2:	4602      	mov	r2, r0
 80016c4:	697b      	ldr	r3, [r7, #20]
 80016c6:	1ad3      	subs	r3, r2, r3
 80016c8:	2b11      	cmp	r3, #17
 80016ca:	d901      	bls.n	80016d0 <HAL_RCC_OscConfig+0x378>
            {
              return HAL_TIMEOUT;
 80016cc:	2303      	movs	r3, #3
 80016ce:	e1bc      	b.n	8001a4a <HAL_RCC_OscConfig+0x6f2>
          while (LL_RCC_LSI_IsReady() != 0U)
 80016d0:	f7ff fc68 	bl	8000fa4 <LL_RCC_LSI_IsReady>
 80016d4:	4603      	mov	r3, r0
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d1f1      	bne.n	80016be <HAL_RCC_OscConfig+0x366>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPRE, RCC_OscInitStruct->LSIDiv);
 80016da:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80016de:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80016e2:	f023 0210 	bic.w	r2, r3, #16
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	69db      	ldr	r3, [r3, #28]
 80016ea:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80016ee:	4313      	orrs	r3, r2
 80016f0:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
      }

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80016f4:	f7ff fc36 	bl	8000f64 <LL_RCC_LSI_Enable>

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016f8:	f7ff f8f8 	bl	80008ec <HAL_GetTick>
 80016fc:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (LL_RCC_LSI_IsReady() == 0U)
 80016fe:	e00c      	b.n	800171a <HAL_RCC_OscConfig+0x3c2>
 8001700:	20000000 	.word	0x20000000
 8001704:	20000004 	.word	0x20000004
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001708:	f7ff f8f0 	bl	80008ec <HAL_GetTick>
 800170c:	4602      	mov	r2, r0
 800170e:	697b      	ldr	r3, [r7, #20]
 8001710:	1ad3      	subs	r3, r2, r3
 8001712:	2b11      	cmp	r3, #17
 8001714:	d901      	bls.n	800171a <HAL_RCC_OscConfig+0x3c2>
        {
          return HAL_TIMEOUT;
 8001716:	2303      	movs	r3, #3
 8001718:	e197      	b.n	8001a4a <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSI_IsReady() == 0U)
 800171a:	f7ff fc43 	bl	8000fa4 <LL_RCC_LSI_IsReady>
 800171e:	4603      	mov	r3, r0
 8001720:	2b00      	cmp	r3, #0
 8001722:	d0f1      	beq.n	8001708 <HAL_RCC_OscConfig+0x3b0>
 8001724:	e013      	b.n	800174e <HAL_RCC_OscConfig+0x3f6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001726:	f7ff fc2d 	bl	8000f84 <LL_RCC_LSI_Disable>

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800172a:	f7ff f8df 	bl	80008ec <HAL_GetTick>
 800172e:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (LL_RCC_LSI_IsReady() != 0U)
 8001730:	e008      	b.n	8001744 <HAL_RCC_OscConfig+0x3ec>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001732:	f7ff f8db 	bl	80008ec <HAL_GetTick>
 8001736:	4602      	mov	r2, r0
 8001738:	697b      	ldr	r3, [r7, #20]
 800173a:	1ad3      	subs	r3, r2, r3
 800173c:	2b11      	cmp	r3, #17
 800173e:	d901      	bls.n	8001744 <HAL_RCC_OscConfig+0x3ec>
        {
          return HAL_TIMEOUT;
 8001740:	2303      	movs	r3, #3
 8001742:	e182      	b.n	8001a4a <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSI_IsReady() != 0U)
 8001744:	f7ff fc2e 	bl	8000fa4 <LL_RCC_LSI_IsReady>
 8001748:	4603      	mov	r3, r0
 800174a:	2b00      	cmp	r3, #0
 800174c:	d1f1      	bne.n	8001732 <HAL_RCC_OscConfig+0x3da>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	f003 0304 	and.w	r3, r3, #4
 8001756:	2b00      	cmp	r3, #0
 8001758:	f000 80d8 	beq.w	800190c <HAL_RCC_OscConfig+0x5b4>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (LL_PWR_IsEnabledBkUpAccess() == 0U)
 800175c:	f7ff fb44 	bl	8000de8 <LL_PWR_IsEnabledBkUpAccess>
 8001760:	4603      	mov	r3, r0
 8001762:	2b00      	cmp	r3, #0
 8001764:	d113      	bne.n	800178e <HAL_RCC_OscConfig+0x436>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8001766:	f7ff fb0d 	bl	8000d84 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800176a:	f7ff f8bf 	bl	80008ec <HAL_GetTick>
 800176e:	6178      	str	r0, [r7, #20]

      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8001770:	e008      	b.n	8001784 <HAL_RCC_OscConfig+0x42c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001772:	f7ff f8bb 	bl	80008ec <HAL_GetTick>
 8001776:	4602      	mov	r2, r0
 8001778:	697b      	ldr	r3, [r7, #20]
 800177a:	1ad3      	subs	r3, r2, r3
 800177c:	2b02      	cmp	r3, #2
 800177e:	d901      	bls.n	8001784 <HAL_RCC_OscConfig+0x42c>
        {
          return HAL_TIMEOUT;
 8001780:	2303      	movs	r3, #3
 8001782:	e162      	b.n	8001a4a <HAL_RCC_OscConfig+0x6f2>
      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8001784:	f7ff fb30 	bl	8000de8 <LL_PWR_IsEnabledBkUpAccess>
 8001788:	4603      	mov	r3, r0
 800178a:	2b00      	cmp	r3, #0
 800178c:	d0f1      	beq.n	8001772 <HAL_RCC_OscConfig+0x41a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	68db      	ldr	r3, [r3, #12]
 8001792:	2b00      	cmp	r3, #0
 8001794:	d07b      	beq.n	800188e <HAL_RCC_OscConfig+0x536>
    {
      /* Enable LSE bypasss (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS)
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	68db      	ldr	r3, [r3, #12]
 800179a:	2b85      	cmp	r3, #133	; 0x85
 800179c:	d003      	beq.n	80017a6 <HAL_RCC_OscConfig+0x44e>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS_RTC_ONLY))
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	68db      	ldr	r3, [r3, #12]
 80017a2:	2b05      	cmp	r3, #5
 80017a4:	d109      	bne.n	80017ba <HAL_RCC_OscConfig+0x462>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80017a6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80017aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80017ae:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80017b2:	f043 0304 	orr.w	r3, r3, #4
 80017b6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017ba:	f7ff f897 	bl	80008ec <HAL_GetTick>
 80017be:	6178      	str	r0, [r7, #20]

      /* LSE oscillator enable */
      SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80017c0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80017c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80017c8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80017cc:	f043 0301 	orr.w	r3, r3, #1
 80017d0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 80017d4:	e00a      	b.n	80017ec <HAL_RCC_OscConfig+0x494>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80017d6:	f7ff f889 	bl	80008ec <HAL_GetTick>
 80017da:	4602      	mov	r2, r0
 80017dc:	697b      	ldr	r3, [r7, #20]
 80017de:	1ad3      	subs	r3, r2, r3
 80017e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80017e4:	4293      	cmp	r3, r2
 80017e6:	d901      	bls.n	80017ec <HAL_RCC_OscConfig+0x494>
        {
          return HAL_TIMEOUT;
 80017e8:	2303      	movs	r3, #3
 80017ea:	e12e      	b.n	8001a4a <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSE_IsReady() == 0U)
 80017ec:	f7ff fba9 	bl	8000f42 <LL_RCC_LSE_IsReady>
 80017f0:	4603      	mov	r3, r0
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d0ef      	beq.n	80017d6 <HAL_RCC_OscConfig+0x47e>
        }
      }

      /* Enable LSE system clock (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	68db      	ldr	r3, [r3, #12]
 80017fa:	2b81      	cmp	r3, #129	; 0x81
 80017fc:	d003      	beq.n	8001806 <HAL_RCC_OscConfig+0x4ae>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS))
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	68db      	ldr	r3, [r3, #12]
 8001802:	2b85      	cmp	r3, #133	; 0x85
 8001804:	d121      	bne.n	800184a <HAL_RCC_OscConfig+0x4f2>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001806:	f7ff f871 	bl	80008ec <HAL_GetTick>
 800180a:	6178      	str	r0, [r7, #20]

        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 800180c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001810:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001814:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001818:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800181c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8001820:	e00a      	b.n	8001838 <HAL_RCC_OscConfig+0x4e0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001822:	f7ff f863 	bl	80008ec <HAL_GetTick>
 8001826:	4602      	mov	r2, r0
 8001828:	697b      	ldr	r3, [r7, #20]
 800182a:	1ad3      	subs	r3, r2, r3
 800182c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001830:	4293      	cmp	r3, r2
 8001832:	d901      	bls.n	8001838 <HAL_RCC_OscConfig+0x4e0>
          {
            return HAL_TIMEOUT;
 8001834:	2303      	movs	r3, #3
 8001836:	e108      	b.n	8001a4a <HAL_RCC_OscConfig+0x6f2>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8001838:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800183c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001840:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001844:	2b00      	cmp	r3, #0
 8001846:	d0ec      	beq.n	8001822 <HAL_RCC_OscConfig+0x4ca>
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 8001848:	e060      	b.n	800190c <HAL_RCC_OscConfig+0x5b4>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800184a:	f7ff f84f 	bl	80008ec <HAL_GetTick>
 800184e:	6178      	str	r0, [r7, #20]

        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8001850:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001854:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001858:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800185c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001860:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8001864:	e00a      	b.n	800187c <HAL_RCC_OscConfig+0x524>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001866:	f7ff f841 	bl	80008ec <HAL_GetTick>
 800186a:	4602      	mov	r2, r0
 800186c:	697b      	ldr	r3, [r7, #20]
 800186e:	1ad3      	subs	r3, r2, r3
 8001870:	f241 3288 	movw	r2, #5000	; 0x1388
 8001874:	4293      	cmp	r3, r2
 8001876:	d901      	bls.n	800187c <HAL_RCC_OscConfig+0x524>
          {
            return HAL_TIMEOUT;
 8001878:	2303      	movs	r3, #3
 800187a:	e0e6      	b.n	8001a4a <HAL_RCC_OscConfig+0x6f2>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800187c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001880:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001884:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001888:	2b00      	cmp	r3, #0
 800188a:	d1ec      	bne.n	8001866 <HAL_RCC_OscConfig+0x50e>
 800188c:	e03e      	b.n	800190c <HAL_RCC_OscConfig+0x5b4>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800188e:	f7ff f82d 	bl	80008ec <HAL_GetTick>
 8001892:	6178      	str	r0, [r7, #20]

      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8001894:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001898:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800189c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80018a0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80018a4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSESYSRDY is cleared */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80018a8:	e00a      	b.n	80018c0 <HAL_RCC_OscConfig+0x568>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80018aa:	f7ff f81f 	bl	80008ec <HAL_GetTick>
 80018ae:	4602      	mov	r2, r0
 80018b0:	697b      	ldr	r3, [r7, #20]
 80018b2:	1ad3      	subs	r3, r2, r3
 80018b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80018b8:	4293      	cmp	r3, r2
 80018ba:	d901      	bls.n	80018c0 <HAL_RCC_OscConfig+0x568>
        {
          return HAL_TIMEOUT;
 80018bc:	2303      	movs	r3, #3
 80018be:	e0c4      	b.n	8001a4a <HAL_RCC_OscConfig+0x6f2>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80018c0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80018c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80018c8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d1ec      	bne.n	80018aa <HAL_RCC_OscConfig+0x552>
        }
      }

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80018d0:	f7ff f80c 	bl	80008ec <HAL_GetTick>
 80018d4:	6178      	str	r0, [r7, #20]

      /* LSE oscillator disable */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80018d6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80018da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80018de:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80018e2:	f023 0301 	bic.w	r3, r3, #1
 80018e6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 80018ea:	e00a      	b.n	8001902 <HAL_RCC_OscConfig+0x5aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80018ec:	f7fe fffe 	bl	80008ec <HAL_GetTick>
 80018f0:	4602      	mov	r2, r0
 80018f2:	697b      	ldr	r3, [r7, #20]
 80018f4:	1ad3      	subs	r3, r2, r3
 80018f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80018fa:	4293      	cmp	r3, r2
 80018fc:	d901      	bls.n	8001902 <HAL_RCC_OscConfig+0x5aa>
        {
          return HAL_TIMEOUT;
 80018fe:	2303      	movs	r3, #3
 8001900:	e0a3      	b.n	8001a4a <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSE_IsReady() != 0U)
 8001902:	f7ff fb1e 	bl	8000f42 <LL_RCC_LSE_IsReady>
 8001906:	4603      	mov	r3, r0
 8001908:	2b00      	cmp	r3, #0
 800190a:	d1ef      	bne.n	80018ec <HAL_RCC_OscConfig+0x594>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001910:	2b00      	cmp	r3, #0
 8001912:	f000 8099 	beq.w	8001a48 <HAL_RCC_OscConfig+0x6f0>
  {
    /* Check if the PLL is used as system clock or not */
    if (sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001916:	69fb      	ldr	r3, [r7, #28]
 8001918:	2b0c      	cmp	r3, #12
 800191a:	d06c      	beq.n	80019f6 <HAL_RCC_OscConfig+0x69e>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001920:	2b02      	cmp	r3, #2
 8001922:	d14b      	bne.n	80019bc <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001924:	f7ff fc74 	bl	8001210 <LL_RCC_PLL_Disable>

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001928:	f7fe ffe0 	bl	80008ec <HAL_GetTick>
 800192c:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() != 0U)
 800192e:	e008      	b.n	8001942 <HAL_RCC_OscConfig+0x5ea>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001930:	f7fe ffdc 	bl	80008ec <HAL_GetTick>
 8001934:	4602      	mov	r2, r0
 8001936:	697b      	ldr	r3, [r7, #20]
 8001938:	1ad3      	subs	r3, r2, r3
 800193a:	2b0a      	cmp	r3, #10
 800193c:	d901      	bls.n	8001942 <HAL_RCC_OscConfig+0x5ea>
          {
            return HAL_TIMEOUT;
 800193e:	2303      	movs	r3, #3
 8001940:	e083      	b.n	8001a4a <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() != 0U)
 8001942:	f7ff fc73 	bl	800122c <LL_RCC_PLL_IsReady>
 8001946:	4603      	mov	r3, r0
 8001948:	2b00      	cmp	r3, #0
 800194a:	d1f1      	bne.n	8001930 <HAL_RCC_OscConfig+0x5d8>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800194c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001950:	68da      	ldr	r2, [r3, #12]
 8001952:	4b40      	ldr	r3, [pc, #256]	; (8001a54 <HAL_RCC_OscConfig+0x6fc>)
 8001954:	4013      	ands	r3, r2
 8001956:	687a      	ldr	r2, [r7, #4]
 8001958:	6b11      	ldr	r1, [r2, #48]	; 0x30
 800195a:	687a      	ldr	r2, [r7, #4]
 800195c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800195e:	4311      	orrs	r1, r2
 8001960:	687a      	ldr	r2, [r7, #4]
 8001962:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001964:	0212      	lsls	r2, r2, #8
 8001966:	4311      	orrs	r1, r2
 8001968:	687a      	ldr	r2, [r7, #4]
 800196a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800196c:	4311      	orrs	r1, r2
 800196e:	687a      	ldr	r2, [r7, #4]
 8001970:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001972:	4311      	orrs	r1, r2
 8001974:	687a      	ldr	r2, [r7, #4]
 8001976:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001978:	430a      	orrs	r2, r1
 800197a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800197e:	4313      	orrs	r3, r2
 8001980:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001982:	f7ff fc37 	bl	80011f4 <LL_RCC_PLL_Enable>

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001986:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800198a:	68db      	ldr	r3, [r3, #12]
 800198c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001990:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001994:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001996:	f7fe ffa9 	bl	80008ec <HAL_GetTick>
 800199a:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() == 0U)
 800199c:	e008      	b.n	80019b0 <HAL_RCC_OscConfig+0x658>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800199e:	f7fe ffa5 	bl	80008ec <HAL_GetTick>
 80019a2:	4602      	mov	r2, r0
 80019a4:	697b      	ldr	r3, [r7, #20]
 80019a6:	1ad3      	subs	r3, r2, r3
 80019a8:	2b0a      	cmp	r3, #10
 80019aa:	d901      	bls.n	80019b0 <HAL_RCC_OscConfig+0x658>
          {
            return HAL_TIMEOUT;
 80019ac:	2303      	movs	r3, #3
 80019ae:	e04c      	b.n	8001a4a <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() == 0U)
 80019b0:	f7ff fc3c 	bl	800122c <LL_RCC_PLL_IsReady>
 80019b4:	4603      	mov	r3, r0
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d0f1      	beq.n	800199e <HAL_RCC_OscConfig+0x646>
 80019ba:	e045      	b.n	8001a48 <HAL_RCC_OscConfig+0x6f0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80019bc:	f7ff fc28 	bl	8001210 <LL_RCC_PLL_Disable>

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019c0:	f7fe ff94 	bl	80008ec <HAL_GetTick>
 80019c4:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is disabled */
        while (LL_RCC_PLL_IsReady() != 0U)
 80019c6:	e008      	b.n	80019da <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80019c8:	f7fe ff90 	bl	80008ec <HAL_GetTick>
 80019cc:	4602      	mov	r2, r0
 80019ce:	697b      	ldr	r3, [r7, #20]
 80019d0:	1ad3      	subs	r3, r2, r3
 80019d2:	2b0a      	cmp	r3, #10
 80019d4:	d901      	bls.n	80019da <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 80019d6:	2303      	movs	r3, #3
 80019d8:	e037      	b.n	8001a4a <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() != 0U)
 80019da:	f7ff fc27 	bl	800122c <LL_RCC_PLL_IsReady>
 80019de:	4603      	mov	r3, r0
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d1f1      	bne.n	80019c8 <HAL_RCC_OscConfig+0x670>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 80019e4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80019e8:	68da      	ldr	r2, [r3, #12]
 80019ea:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80019ee:	4b1a      	ldr	r3, [pc, #104]	; (8001a58 <HAL_RCC_OscConfig+0x700>)
 80019f0:	4013      	ands	r3, r2
 80019f2:	60cb      	str	r3, [r1, #12]
 80019f4:	e028      	b.n	8001a48 <HAL_RCC_OscConfig+0x6f0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019fa:	2b01      	cmp	r3, #1
 80019fc:	d101      	bne.n	8001a02 <HAL_RCC_OscConfig+0x6aa>
      {
        return HAL_ERROR;
 80019fe:	2301      	movs	r3, #1
 8001a00:	e023      	b.n	8001a4a <HAL_RCC_OscConfig+0x6f2>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001a02:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a06:	68db      	ldr	r3, [r3, #12]
 8001a08:	61bb      	str	r3, [r7, #24]
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource)
 8001a0a:	69bb      	ldr	r3, [r7, #24]
 8001a0c:	f003 0203 	and.w	r2, r3, #3
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a14:	429a      	cmp	r2, r3
 8001a16:	d115      	bne.n	8001a44 <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)   != RCC_OscInitStruct->PLL.PLLM)
 8001a18:	69bb      	ldr	r3, [r7, #24]
 8001a1a:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a22:	429a      	cmp	r2, r3
 8001a24:	d10e      	bne.n	8001a44 <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)   != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos))
 8001a26:	69bb      	ldr	r3, [r7, #24]
 8001a28:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a30:	021b      	lsls	r3, r3, #8
 8001a32:	429a      	cmp	r2, r3
 8001a34:	d106      	bne.n	8001a44 <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)   != RCC_OscInitStruct->PLL.PLLR))
 8001a36:	69bb      	ldr	r3, [r7, #24]
 8001a38:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a40:	429a      	cmp	r2, r3
 8001a42:	d001      	beq.n	8001a48 <HAL_RCC_OscConfig+0x6f0>
        {
          return HAL_ERROR;
 8001a44:	2301      	movs	r3, #1
 8001a46:	e000      	b.n	8001a4a <HAL_RCC_OscConfig+0x6f2>
        }
      }
    }
  }
  return HAL_OK;
 8001a48:	2300      	movs	r3, #0
}
 8001a4a:	4618      	mov	r0, r3
 8001a4c:	3720      	adds	r7, #32
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	bd80      	pop	{r7, pc}
 8001a52:	bf00      	nop
 8001a54:	11c1808c 	.word	0x11c1808c
 8001a58:	eefefffc 	.word	0xeefefffc

08001a5c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	b084      	sub	sp, #16
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	6078      	str	r0, [r7, #4]
 8001a64:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d101      	bne.n	8001a70 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001a6c:	2301      	movs	r3, #1
 8001a6e:	e12c      	b.n	8001cca <HAL_RCC_ClockConfig+0x26e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK3) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001a70:	4b98      	ldr	r3, [pc, #608]	; (8001cd4 <HAL_RCC_ClockConfig+0x278>)
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	f003 0307 	and.w	r3, r3, #7
 8001a78:	683a      	ldr	r2, [r7, #0]
 8001a7a:	429a      	cmp	r2, r3
 8001a7c:	d91b      	bls.n	8001ab6 <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a7e:	4b95      	ldr	r3, [pc, #596]	; (8001cd4 <HAL_RCC_ClockConfig+0x278>)
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	f023 0207 	bic.w	r2, r3, #7
 8001a86:	4993      	ldr	r1, [pc, #588]	; (8001cd4 <HAL_RCC_ClockConfig+0x278>)
 8001a88:	683b      	ldr	r3, [r7, #0]
 8001a8a:	4313      	orrs	r3, r2
 8001a8c:	600b      	str	r3, [r1, #0]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001a8e:	f7fe ff2d 	bl	80008ec <HAL_GetTick>
 8001a92:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a94:	e008      	b.n	8001aa8 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8001a96:	f7fe ff29 	bl	80008ec <HAL_GetTick>
 8001a9a:	4602      	mov	r2, r0
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	1ad3      	subs	r3, r2, r3
 8001aa0:	2b02      	cmp	r3, #2
 8001aa2:	d901      	bls.n	8001aa8 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8001aa4:	2303      	movs	r3, #3
 8001aa6:	e110      	b.n	8001cca <HAL_RCC_ClockConfig+0x26e>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001aa8:	4b8a      	ldr	r3, [pc, #552]	; (8001cd4 <HAL_RCC_ClockConfig+0x278>)
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	f003 0307 	and.w	r3, r3, #7
 8001ab0:	683a      	ldr	r2, [r7, #0]
 8001ab2:	429a      	cmp	r2, r3
 8001ab4:	d1ef      	bne.n	8001a96 <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	f003 0302 	and.w	r3, r3, #2
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d016      	beq.n	8001af0 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	689b      	ldr	r3, [r3, #8]
 8001ac6:	4618      	mov	r0, r3
 8001ac8:	f7ff fb02 	bl	80010d0 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8001acc:	f7fe ff0e 	bl	80008ec <HAL_GetTick>
 8001ad0:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8001ad2:	e008      	b.n	8001ae6 <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8001ad4:	f7fe ff0a 	bl	80008ec <HAL_GetTick>
 8001ad8:	4602      	mov	r2, r0
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	1ad3      	subs	r3, r2, r3
 8001ade:	2b02      	cmp	r3, #2
 8001ae0:	d901      	bls.n	8001ae6 <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 8001ae2:	2303      	movs	r3, #3
 8001ae4:	e0f1      	b.n	8001cca <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8001ae6:	f7ff fbdf 	bl	80012a8 <LL_RCC_IsActiveFlag_HPRE>
 8001aea:	4603      	mov	r3, r0
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d0f1      	beq.n	8001ad4 <HAL_RCC_ClockConfig+0x78>
    }
  }

#if defined(DUAL_CORE)
  /*-------------------------- HCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	f003 0320 	and.w	r3, r3, #32
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d016      	beq.n	8001b2a <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	695b      	ldr	r3, [r3, #20]
 8001b00:	4618      	mov	r0, r3
 8001b02:	f7ff faf8 	bl	80010f6 <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8001b06:	f7fe fef1 	bl	80008ec <HAL_GetTick>
 8001b0a:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8001b0c:	e008      	b.n	8001b20 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8001b0e:	f7fe feed 	bl	80008ec <HAL_GetTick>
 8001b12:	4602      	mov	r2, r0
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	1ad3      	subs	r3, r2, r3
 8001b18:	2b02      	cmp	r3, #2
 8001b1a:	d901      	bls.n	8001b20 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8001b1c:	2303      	movs	r3, #3
 8001b1e:	e0d4      	b.n	8001cca <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8001b20:	f7ff fbd3 	bl	80012ca <LL_RCC_IsActiveFlag_C2HPRE>
 8001b24:	4603      	mov	r3, r0
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d0f1      	beq.n	8001b0e <HAL_RCC_ClockConfig+0xb2>
    }
  }
#endif /* DUAL_CORE */

  /*-------------------------- HCLK3 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK3) == RCC_CLOCKTYPE_HCLK3)
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d016      	beq.n	8001b64 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK3Divider));
    LL_RCC_SetAHB3Prescaler(RCC_ClkInitStruct->AHBCLK3Divider);
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	699b      	ldr	r3, [r3, #24]
 8001b3a:	4618      	mov	r0, r3
 8001b3c:	f7ff faf0 	bl	8001120 <LL_RCC_SetAHB3Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8001b40:	f7fe fed4 	bl	80008ec <HAL_GetTick>
 8001b44:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8001b46:	e008      	b.n	8001b5a <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8001b48:	f7fe fed0 	bl	80008ec <HAL_GetTick>
 8001b4c:	4602      	mov	r2, r0
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	1ad3      	subs	r3, r2, r3
 8001b52:	2b02      	cmp	r3, #2
 8001b54:	d901      	bls.n	8001b5a <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 8001b56:	2303      	movs	r3, #3
 8001b58:	e0b7      	b.n	8001cca <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8001b5a:	f7ff fbc8 	bl	80012ee <LL_RCC_IsActiveFlag_SHDHPRE>
 8001b5e:	4603      	mov	r3, r0
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d0f1      	beq.n	8001b48 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	f003 0304 	and.w	r3, r3, #4
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d016      	beq.n	8001b9e <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	68db      	ldr	r3, [r3, #12]
 8001b74:	4618      	mov	r0, r3
 8001b76:	f7ff fae9 	bl	800114c <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8001b7a:	f7fe feb7 	bl	80008ec <HAL_GetTick>
 8001b7e:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8001b80:	e008      	b.n	8001b94 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8001b82:	f7fe feb3 	bl	80008ec <HAL_GetTick>
 8001b86:	4602      	mov	r2, r0
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	1ad3      	subs	r3, r2, r3
 8001b8c:	2b02      	cmp	r3, #2
 8001b8e:	d901      	bls.n	8001b94 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 8001b90:	2303      	movs	r3, #3
 8001b92:	e09a      	b.n	8001cca <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8001b94:	f7ff fbbd 	bl	8001312 <LL_RCC_IsActiveFlag_PPRE1>
 8001b98:	4603      	mov	r3, r0
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d0f1      	beq.n	8001b82 <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	f003 0308 	and.w	r3, r3, #8
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d017      	beq.n	8001bda <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	691b      	ldr	r3, [r3, #16]
 8001bae:	00db      	lsls	r3, r3, #3
 8001bb0:	4618      	mov	r0, r3
 8001bb2:	f7ff fade 	bl	8001172 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8001bb6:	f7fe fe99 	bl	80008ec <HAL_GetTick>
 8001bba:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8001bbc:	e008      	b.n	8001bd0 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8001bbe:	f7fe fe95 	bl	80008ec <HAL_GetTick>
 8001bc2:	4602      	mov	r2, r0
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	1ad3      	subs	r3, r2, r3
 8001bc8:	2b02      	cmp	r3, #2
 8001bca:	d901      	bls.n	8001bd0 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 8001bcc:	2303      	movs	r3, #3
 8001bce:	e07c      	b.n	8001cca <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8001bd0:	f7ff fbb0 	bl	8001334 <LL_RCC_IsActiveFlag_PPRE2>
 8001bd4:	4603      	mov	r3, r0
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d0f1      	beq.n	8001bbe <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	f003 0301 	and.w	r3, r3, #1
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d043      	beq.n	8001c6e <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	685b      	ldr	r3, [r3, #4]
 8001bea:	2b02      	cmp	r3, #2
 8001bec:	d106      	bne.n	8001bfc <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8001bee:	f7ff f956 	bl	8000e9e <LL_RCC_HSE_IsReady>
 8001bf2:	4603      	mov	r3, r0
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d11e      	bne.n	8001c36 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8001bf8:	2301      	movs	r3, #1
 8001bfa:	e066      	b.n	8001cca <HAL_RCC_ClockConfig+0x26e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	685b      	ldr	r3, [r3, #4]
 8001c00:	2b03      	cmp	r3, #3
 8001c02:	d106      	bne.n	8001c12 <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8001c04:	f7ff fb12 	bl	800122c <LL_RCC_PLL_IsReady>
 8001c08:	4603      	mov	r3, r0
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d113      	bne.n	8001c36 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8001c0e:	2301      	movs	r3, #1
 8001c10:	e05b      	b.n	8001cca <HAL_RCC_ClockConfig+0x26e>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	685b      	ldr	r3, [r3, #4]
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d106      	bne.n	8001c28 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8001c1a:	f7ff f9f0 	bl	8000ffe <LL_RCC_MSI_IsReady>
 8001c1e:	4603      	mov	r3, r0
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d108      	bne.n	8001c36 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8001c24:	2301      	movs	r3, #1
 8001c26:	e050      	b.n	8001cca <HAL_RCC_ClockConfig+0x26e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8001c28:	f7ff f966 	bl	8000ef8 <LL_RCC_HSI_IsReady>
 8001c2c:	4603      	mov	r3, r0
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d101      	bne.n	8001c36 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8001c32:	2301      	movs	r3, #1
 8001c34:	e049      	b.n	8001cca <HAL_RCC_ClockConfig+0x26e>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	685b      	ldr	r3, [r3, #4]
 8001c3a:	4618      	mov	r0, r3
 8001c3c:	f7ff fa2a 	bl	8001094 <LL_RCC_SetSysClkSource>

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001c40:	f7fe fe54 	bl	80008ec <HAL_GetTick>
 8001c44:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c46:	e00a      	b.n	8001c5e <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c48:	f7fe fe50 	bl	80008ec <HAL_GetTick>
 8001c4c:	4602      	mov	r2, r0
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	1ad3      	subs	r3, r2, r3
 8001c52:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c56:	4293      	cmp	r3, r2
 8001c58:	d901      	bls.n	8001c5e <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 8001c5a:	2303      	movs	r3, #3
 8001c5c:	e035      	b.n	8001cca <HAL_RCC_ClockConfig+0x26e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c5e:	f7ff fa2c 	bl	80010ba <LL_RCC_GetSysClkSource>
 8001c62:	4602      	mov	r2, r0
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	685b      	ldr	r3, [r3, #4]
 8001c68:	009b      	lsls	r3, r3, #2
 8001c6a:	429a      	cmp	r2, r3
 8001c6c:	d1ec      	bne.n	8001c48 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001c6e:	4b19      	ldr	r3, [pc, #100]	; (8001cd4 <HAL_RCC_ClockConfig+0x278>)
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	f003 0307 	and.w	r3, r3, #7
 8001c76:	683a      	ldr	r2, [r7, #0]
 8001c78:	429a      	cmp	r2, r3
 8001c7a:	d21b      	bcs.n	8001cb4 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c7c:	4b15      	ldr	r3, [pc, #84]	; (8001cd4 <HAL_RCC_ClockConfig+0x278>)
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	f023 0207 	bic.w	r2, r3, #7
 8001c84:	4913      	ldr	r1, [pc, #76]	; (8001cd4 <HAL_RCC_ClockConfig+0x278>)
 8001c86:	683b      	ldr	r3, [r7, #0]
 8001c88:	4313      	orrs	r3, r2
 8001c8a:	600b      	str	r3, [r1, #0]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001c8c:	f7fe fe2e 	bl	80008ec <HAL_GetTick>
 8001c90:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c92:	e008      	b.n	8001ca6 <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8001c94:	f7fe fe2a 	bl	80008ec <HAL_GetTick>
 8001c98:	4602      	mov	r2, r0
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	1ad3      	subs	r3, r2, r3
 8001c9e:	2b02      	cmp	r3, #2
 8001ca0:	d901      	bls.n	8001ca6 <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 8001ca2:	2303      	movs	r3, #3
 8001ca4:	e011      	b.n	8001cca <HAL_RCC_ClockConfig+0x26e>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ca6:	4b0b      	ldr	r3, [pc, #44]	; (8001cd4 <HAL_RCC_ClockConfig+0x278>)
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	f003 0307 	and.w	r3, r3, #7
 8001cae:	683a      	ldr	r2, [r7, #0]
 8001cb0:	429a      	cmp	r2, r3
 8001cb2:	d1ef      	bne.n	8001c94 <HAL_RCC_ClockConfig+0x238>
  }

  /*--------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8001cb4:	f000 f8b4 	bl	8001e20 <HAL_RCC_GetHCLKFreq>
 8001cb8:	4603      	mov	r3, r0
 8001cba:	4a07      	ldr	r2, [pc, #28]	; (8001cd8 <HAL_RCC_ClockConfig+0x27c>)
 8001cbc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  return HAL_InitTick(uwTickPrio);
 8001cbe:	4b07      	ldr	r3, [pc, #28]	; (8001cdc <HAL_RCC_ClockConfig+0x280>)
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	4618      	mov	r0, r3
 8001cc4:	f7fe fdc6 	bl	8000854 <HAL_InitTick>
 8001cc8:	4603      	mov	r3, r0
}
 8001cca:	4618      	mov	r0, r3
 8001ccc:	3710      	adds	r7, #16
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	bd80      	pop	{r7, pc}
 8001cd2:	bf00      	nop
 8001cd4:	58004000 	.word	0x58004000
 8001cd8:	20000000 	.word	0x20000000
 8001cdc:	20000004 	.word	0x20000004

08001ce0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001ce0:	b590      	push	{r4, r7, lr}
 8001ce2:	b087      	sub	sp, #28
 8001ce4:	af00      	add	r7, sp, #0
  uint32_t sysclk_source;
  uint32_t pllsource;
  uint32_t sysclockfreq = 0U;
 8001ce6:	2300      	movs	r3, #0
 8001ce8:	617b      	str	r3, [r7, #20]
  uint32_t msifreq = 0U;
 8001cea:	2300      	movs	r3, #0
 8001cec:	613b      	str	r3, [r7, #16]
  uint32_t pllinputfreq;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001cee:	f7ff f9e4 	bl	80010ba <LL_RCC_GetSysClkSource>
 8001cf2:	60b8      	str	r0, [r7, #8]
  pllsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001cf4:	f7ff facd 	bl	8001292 <LL_RCC_PLL_GetMainSource>
 8001cf8:	6078      	str	r0, [r7, #4]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8001cfa:	68bb      	ldr	r3, [r7, #8]
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d005      	beq.n	8001d0c <HAL_RCC_GetSysClockFreq+0x2c>
 8001d00:	68bb      	ldr	r3, [r7, #8]
 8001d02:	2b0c      	cmp	r3, #12
 8001d04:	d139      	bne.n	8001d7a <HAL_RCC_GetSysClockFreq+0x9a>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pllsource == RCC_PLLSOURCE_MSI)))
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	2b01      	cmp	r3, #1
 8001d0a:	d136      	bne.n	8001d7a <HAL_RCC_GetSysClockFreq+0x9a>
  {
    /* MSI or PLL with MSI source used as system clock source */
    /* Retrieve MSI frequency range in Hz */
    msifreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 8001d0c:	f7ff f987 	bl	800101e <LL_RCC_MSI_IsEnabledRangeSelect>
 8001d10:	4603      	mov	r3, r0
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d115      	bne.n	8001d42 <HAL_RCC_GetSysClockFreq+0x62>
 8001d16:	f7ff f982 	bl	800101e <LL_RCC_MSI_IsEnabledRangeSelect>
 8001d1a:	4603      	mov	r3, r0
 8001d1c:	2b01      	cmp	r3, #1
 8001d1e:	d106      	bne.n	8001d2e <HAL_RCC_GetSysClockFreq+0x4e>
 8001d20:	f7ff f98d 	bl	800103e <LL_RCC_MSI_GetRange>
 8001d24:	4603      	mov	r3, r0
 8001d26:	0a1b      	lsrs	r3, r3, #8
 8001d28:	f003 030f 	and.w	r3, r3, #15
 8001d2c:	e005      	b.n	8001d3a <HAL_RCC_GetSysClockFreq+0x5a>
 8001d2e:	f7ff f991 	bl	8001054 <LL_RCC_MSI_GetRangeAfterStandby>
 8001d32:	4603      	mov	r3, r0
 8001d34:	0a1b      	lsrs	r3, r3, #8
 8001d36:	f003 030f 	and.w	r3, r3, #15
 8001d3a:	4a36      	ldr	r2, [pc, #216]	; (8001e14 <HAL_RCC_GetSysClockFreq+0x134>)
 8001d3c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d40:	e014      	b.n	8001d6c <HAL_RCC_GetSysClockFreq+0x8c>
 8001d42:	f7ff f96c 	bl	800101e <LL_RCC_MSI_IsEnabledRangeSelect>
 8001d46:	4603      	mov	r3, r0
 8001d48:	2b01      	cmp	r3, #1
 8001d4a:	d106      	bne.n	8001d5a <HAL_RCC_GetSysClockFreq+0x7a>
 8001d4c:	f7ff f977 	bl	800103e <LL_RCC_MSI_GetRange>
 8001d50:	4603      	mov	r3, r0
 8001d52:	091b      	lsrs	r3, r3, #4
 8001d54:	f003 030f 	and.w	r3, r3, #15
 8001d58:	e005      	b.n	8001d66 <HAL_RCC_GetSysClockFreq+0x86>
 8001d5a:	f7ff f97b 	bl	8001054 <LL_RCC_MSI_GetRangeAfterStandby>
 8001d5e:	4603      	mov	r3, r0
 8001d60:	091b      	lsrs	r3, r3, #4
 8001d62:	f003 030f 	and.w	r3, r3, #15
 8001d66:	4a2b      	ldr	r2, [pc, #172]	; (8001e14 <HAL_RCC_GetSysClockFreq+0x134>)
 8001d68:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d6c:	613b      	str	r3, [r7, #16]
                                     ((LL_RCC_MSI_IsEnabledRangeSelect() == 1U) ?
                                      LL_RCC_MSI_GetRange() :
                                      LL_RCC_MSI_GetRangeAfterStandby()));

    /* Get SYSCLK source */
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8001d6e:	68bb      	ldr	r3, [r7, #8]
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d115      	bne.n	8001da0 <HAL_RCC_GetSysClockFreq+0xc0>
    {
      /* MSI used as system clock source */
      sysclockfreq = msifreq;
 8001d74:	693b      	ldr	r3, [r7, #16]
 8001d76:	617b      	str	r3, [r7, #20]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8001d78:	e012      	b.n	8001da0 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001d7a:	68bb      	ldr	r3, [r7, #8]
 8001d7c:	2b04      	cmp	r3, #4
 8001d7e:	d102      	bne.n	8001d86 <HAL_RCC_GetSysClockFreq+0xa6>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001d80:	4b25      	ldr	r3, [pc, #148]	; (8001e18 <HAL_RCC_GetSysClockFreq+0x138>)
 8001d82:	617b      	str	r3, [r7, #20]
 8001d84:	e00c      	b.n	8001da0 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001d86:	68bb      	ldr	r3, [r7, #8]
 8001d88:	2b08      	cmp	r3, #8
 8001d8a:	d109      	bne.n	8001da0 <HAL_RCC_GetSysClockFreq+0xc0>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8001d8c:	f7ff f85a 	bl	8000e44 <LL_RCC_HSE_IsEnabledDiv2>
 8001d90:	4603      	mov	r3, r0
 8001d92:	2b01      	cmp	r3, #1
 8001d94:	d102      	bne.n	8001d9c <HAL_RCC_GetSysClockFreq+0xbc>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8001d96:	4b20      	ldr	r3, [pc, #128]	; (8001e18 <HAL_RCC_GetSysClockFreq+0x138>)
 8001d98:	617b      	str	r3, [r7, #20]
 8001d9a:	e001      	b.n	8001da0 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8001d9c:	4b1f      	ldr	r3, [pc, #124]	; (8001e1c <HAL_RCC_GetSysClockFreq+0x13c>)
 8001d9e:	617b      	str	r3, [r7, #20]
  else
  {
    /* Nothing to do */
  }

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001da0:	f7ff f98b 	bl	80010ba <LL_RCC_GetSysClkSource>
 8001da4:	4603      	mov	r3, r0
 8001da6:	2b0c      	cmp	r3, #12
 8001da8:	d12f      	bne.n	8001e0a <HAL_RCC_GetSysClockFreq+0x12a>
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8001daa:	f7ff fa72 	bl	8001292 <LL_RCC_PLL_GetMainSource>
 8001dae:	6078      	str	r0, [r7, #4]

    switch (pllsource)
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	2b02      	cmp	r3, #2
 8001db4:	d003      	beq.n	8001dbe <HAL_RCC_GetSysClockFreq+0xde>
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	2b03      	cmp	r3, #3
 8001dba:	d003      	beq.n	8001dc4 <HAL_RCC_GetSysClockFreq+0xe4>
 8001dbc:	e00d      	b.n	8001dda <HAL_RCC_GetSysClockFreq+0xfa>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8001dbe:	4b16      	ldr	r3, [pc, #88]	; (8001e18 <HAL_RCC_GetSysClockFreq+0x138>)
 8001dc0:	60fb      	str	r3, [r7, #12]
        break;
 8001dc2:	e00d      	b.n	8001de0 <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8001dc4:	f7ff f83e 	bl	8000e44 <LL_RCC_HSE_IsEnabledDiv2>
 8001dc8:	4603      	mov	r3, r0
 8001dca:	2b01      	cmp	r3, #1
 8001dcc:	d102      	bne.n	8001dd4 <HAL_RCC_GetSysClockFreq+0xf4>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8001dce:	4b12      	ldr	r3, [pc, #72]	; (8001e18 <HAL_RCC_GetSysClockFreq+0x138>)
 8001dd0:	60fb      	str	r3, [r7, #12]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8001dd2:	e005      	b.n	8001de0 <HAL_RCC_GetSysClockFreq+0x100>
          pllinputfreq = HSE_VALUE;
 8001dd4:	4b11      	ldr	r3, [pc, #68]	; (8001e1c <HAL_RCC_GetSysClockFreq+0x13c>)
 8001dd6:	60fb      	str	r3, [r7, #12]
        break;
 8001dd8:	e002      	b.n	8001de0 <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = msifreq;
 8001dda:	693b      	ldr	r3, [r7, #16]
 8001ddc:	60fb      	str	r3, [r7, #12]
        break;
 8001dde:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8001de0:	f7ff fa35 	bl	800124e <LL_RCC_PLL_GetN>
 8001de4:	4602      	mov	r2, r0
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	fb03 f402 	mul.w	r4, r3, r2
 8001dec:	f7ff fa46 	bl	800127c <LL_RCC_PLL_GetDivider>
 8001df0:	4603      	mov	r3, r0
 8001df2:	091b      	lsrs	r3, r3, #4
 8001df4:	3301      	adds	r3, #1
 8001df6:	fbb4 f4f3 	udiv	r4, r4, r3
 8001dfa:	f7ff fa34 	bl	8001266 <LL_RCC_PLL_GetR>
 8001dfe:	4603      	mov	r3, r0
 8001e00:	0f5b      	lsrs	r3, r3, #29
 8001e02:	3301      	adds	r3, #1
 8001e04:	fbb4 f3f3 	udiv	r3, r4, r3
 8001e08:	617b      	str	r3, [r7, #20]
                                             LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 8001e0a:	697b      	ldr	r3, [r7, #20]
}
 8001e0c:	4618      	mov	r0, r3
 8001e0e:	371c      	adds	r7, #28
 8001e10:	46bd      	mov	sp, r7
 8001e12:	bd90      	pop	{r4, r7, pc}
 8001e14:	08003038 	.word	0x08003038
 8001e18:	00f42400 	.word	0x00f42400
 8001e1c:	01e84800 	.word	0x01e84800

08001e20 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001e20:	b598      	push	{r3, r4, r7, lr}
 8001e22:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency --------------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8001e24:	f7ff ff5c 	bl	8001ce0 <HAL_RCC_GetSysClockFreq>
 8001e28:	4604      	mov	r4, r0
 8001e2a:	f7ff f9b5 	bl	8001198 <LL_RCC_GetAHBPrescaler>
 8001e2e:	4603      	mov	r3, r0
 8001e30:	091b      	lsrs	r3, r3, #4
 8001e32:	f003 030f 	and.w	r3, r3, #15
 8001e36:	4a03      	ldr	r2, [pc, #12]	; (8001e44 <HAL_RCC_GetHCLKFreq+0x24>)
 8001e38:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e3c:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8001e40:	4618      	mov	r0, r3
 8001e42:	bd98      	pop	{r3, r4, r7, pc}
 8001e44:	08002fd8 	.word	0x08002fd8

08001e48 <HAL_RCC_GetPCLK1Freq>:
/**
  * @brief  Return the PCLK1 frequency.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001e48:	b598      	push	{r3, r4, r7, lr}
 8001e4a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8001e4c:	f7ff ffe8 	bl	8001e20 <HAL_RCC_GetHCLKFreq>
 8001e50:	4604      	mov	r4, r0
 8001e52:	f7ff f9b9 	bl	80011c8 <LL_RCC_GetAPB1Prescaler>
 8001e56:	4603      	mov	r3, r0
 8001e58:	0a1b      	lsrs	r3, r3, #8
 8001e5a:	4a03      	ldr	r2, [pc, #12]	; (8001e68 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001e5c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e60:	fa24 f303 	lsr.w	r3, r4, r3
}
 8001e64:	4618      	mov	r0, r3
 8001e66:	bd98      	pop	{r3, r4, r7, pc}
 8001e68:	08003018 	.word	0x08003018

08001e6c <HAL_RCC_GetPCLK2Freq>:
/**
  * @brief  Return the PCLK2 frequency.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001e6c:	b598      	push	{r3, r4, r7, lr}
 8001e6e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 8001e70:	f7ff ffd6 	bl	8001e20 <HAL_RCC_GetHCLKFreq>
 8001e74:	4604      	mov	r4, r0
 8001e76:	f7ff f9b2 	bl	80011de <LL_RCC_GetAPB2Prescaler>
 8001e7a:	4603      	mov	r3, r0
 8001e7c:	0adb      	lsrs	r3, r3, #11
 8001e7e:	4a03      	ldr	r2, [pc, #12]	; (8001e8c <HAL_RCC_GetPCLK2Freq+0x20>)
 8001e80:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e84:	fa24 f303 	lsr.w	r3, r4, r3
}
 8001e88:	4618      	mov	r0, r3
 8001e8a:	bd98      	pop	{r3, r4, r7, pc}
 8001e8c:	08003018 	.word	0x08003018

08001e90 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8001e90:	b590      	push	{r4, r7, lr}
 8001e92:	b085      	sub	sp, #20
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	6078      	str	r0, [r7, #4]
  uint32_t flash_clksrcfreq;
  uint32_t msifreq;

  /* MSI frequency range in Hz */
  msifreq           = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSIRANGESEL_RUN, MSI_Range);
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	091b      	lsrs	r3, r3, #4
 8001e9c:	f003 030f 	and.w	r3, r3, #15
 8001ea0:	4a10      	ldr	r2, [pc, #64]	; (8001ee4 <RCC_SetFlashLatencyFromMSIRange+0x54>)
 8001ea2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ea6:	60fb      	str	r3, [r7, #12]
  flash_clksrcfreq  = __LL_RCC_CALC_HCLK3_FREQ(msifreq, LL_RCC_GetAHB3Prescaler());
 8001ea8:	f7ff f981 	bl	80011ae <LL_RCC_GetAHB3Prescaler>
 8001eac:	4603      	mov	r3, r0
 8001eae:	091b      	lsrs	r3, r3, #4
 8001eb0:	f003 030f 	and.w	r3, r3, #15
 8001eb4:	4a0c      	ldr	r2, [pc, #48]	; (8001ee8 <RCC_SetFlashLatencyFromMSIRange+0x58>)
 8001eb6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001eba:	68fa      	ldr	r2, [r7, #12]
 8001ebc:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ec0:	60bb      	str	r3, [r7, #8]

  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8001ec2:	68bb      	ldr	r3, [r7, #8]
 8001ec4:	4a09      	ldr	r2, [pc, #36]	; (8001eec <RCC_SetFlashLatencyFromMSIRange+0x5c>)
 8001ec6:	fba2 2303 	umull	r2, r3, r2, r3
 8001eca:	0c9c      	lsrs	r4, r3, #18
 8001ecc:	f7fe ff76 	bl	8000dbc <HAL_PWREx_GetVoltageRange>
 8001ed0:	4603      	mov	r3, r0
 8001ed2:	4619      	mov	r1, r3
 8001ed4:	4620      	mov	r0, r4
 8001ed6:	f000 f80b 	bl	8001ef0 <RCC_SetFlashLatency>
 8001eda:	4603      	mov	r3, r0
}
 8001edc:	4618      	mov	r0, r3
 8001ede:	3714      	adds	r7, #20
 8001ee0:	46bd      	mov	sp, r7
 8001ee2:	bd90      	pop	{r4, r7, pc}
 8001ee4:	08003038 	.word	0x08003038
 8001ee8:	08002fd8 	.word	0x08002fd8
 8001eec:	431bde83 	.word	0x431bde83

08001ef0 <RCC_SetFlashLatency>:
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE1   Regulator voltage output range 1 mode
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE2   Regulator voltage output range 2 mode
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	b08e      	sub	sp, #56	; 0x38
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	6078      	str	r0, [r7, #4]
 8001ef8:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK3) range in MHz for VCORE range1 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS1[] = {18, 36, 48};
 8001efa:	4a3a      	ldr	r2, [pc, #232]	; (8001fe4 <RCC_SetFlashLatency+0xf4>)
 8001efc:	f107 0320 	add.w	r3, r7, #32
 8001f00:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001f04:	6018      	str	r0, [r3, #0]
 8001f06:	3304      	adds	r3, #4
 8001f08:	8019      	strh	r1, [r3, #0]

  /* Flash Clock source (HCLK3) range in MHz for VCORE range2 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS2[] = {6, 12, 16};
 8001f0a:	4a37      	ldr	r2, [pc, #220]	; (8001fe8 <RCC_SetFlashLatency+0xf8>)
 8001f0c:	f107 0318 	add.w	r3, r7, #24
 8001f10:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001f14:	6018      	str	r0, [r3, #0]
 8001f16:	3304      	adds	r3, #4
 8001f18:	8019      	strh	r1, [r3, #0]

  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2};
 8001f1a:	4a34      	ldr	r2, [pc, #208]	; (8001fec <RCC_SetFlashLatency+0xfc>)
 8001f1c:	f107 030c 	add.w	r3, r7, #12
 8001f20:	ca07      	ldmia	r2, {r0, r1, r2}
 8001f22:	e883 0007 	stmia.w	r3, {r0, r1, r2}

  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8001f26:	2300      	movs	r3, #0
 8001f28:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tickstart;

  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001f2a:	683b      	ldr	r3, [r7, #0]
 8001f2c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001f30:	d11b      	bne.n	8001f6a <RCC_SetFlashLatency+0x7a>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8001f32:	2300      	movs	r3, #0
 8001f34:	633b      	str	r3, [r7, #48]	; 0x30
 8001f36:	e014      	b.n	8001f62 <RCC_SetFlashLatency+0x72>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8001f38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f3a:	005b      	lsls	r3, r3, #1
 8001f3c:	3338      	adds	r3, #56	; 0x38
 8001f3e:	443b      	add	r3, r7
 8001f40:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8001f44:	461a      	mov	r2, r3
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	4293      	cmp	r3, r2
 8001f4a:	d807      	bhi.n	8001f5c <RCC_SetFlashLatency+0x6c>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8001f4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f4e:	009b      	lsls	r3, r3, #2
 8001f50:	3338      	adds	r3, #56	; 0x38
 8001f52:	443b      	add	r3, r7
 8001f54:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8001f58:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8001f5a:	e021      	b.n	8001fa0 <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8001f5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f5e:	3301      	adds	r3, #1
 8001f60:	633b      	str	r3, [r7, #48]	; 0x30
 8001f62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f64:	2b02      	cmp	r3, #2
 8001f66:	d9e7      	bls.n	8001f38 <RCC_SetFlashLatency+0x48>
 8001f68:	e01a      	b.n	8001fa0 <RCC_SetFlashLatency+0xb0>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8001f6a:	2300      	movs	r3, #0
 8001f6c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001f6e:	e014      	b.n	8001f9a <RCC_SetFlashLatency+0xaa>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8001f70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f72:	005b      	lsls	r3, r3, #1
 8001f74:	3338      	adds	r3, #56	; 0x38
 8001f76:	443b      	add	r3, r7
 8001f78:	f833 3c20 	ldrh.w	r3, [r3, #-32]
 8001f7c:	461a      	mov	r2, r3
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	4293      	cmp	r3, r2
 8001f82:	d807      	bhi.n	8001f94 <RCC_SetFlashLatency+0xa4>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8001f84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f86:	009b      	lsls	r3, r3, #2
 8001f88:	3338      	adds	r3, #56	; 0x38
 8001f8a:	443b      	add	r3, r7
 8001f8c:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8001f90:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8001f92:	e005      	b.n	8001fa0 <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8001f94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f96:	3301      	adds	r3, #1
 8001f98:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001f9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f9c:	2b02      	cmp	r3, #2
 8001f9e:	d9e7      	bls.n	8001f70 <RCC_SetFlashLatency+0x80>
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001fa0:	4b13      	ldr	r3, [pc, #76]	; (8001ff0 <RCC_SetFlashLatency+0x100>)
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	f023 0207 	bic.w	r2, r3, #7
 8001fa8:	4911      	ldr	r1, [pc, #68]	; (8001ff0 <RCC_SetFlashLatency+0x100>)
 8001faa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001fac:	4313      	orrs	r3, r2
 8001fae:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8001fb0:	f7fe fc9c 	bl	80008ec <HAL_GetTick>
 8001fb4:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8001fb6:	e008      	b.n	8001fca <RCC_SetFlashLatency+0xda>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8001fb8:	f7fe fc98 	bl	80008ec <HAL_GetTick>
 8001fbc:	4602      	mov	r2, r0
 8001fbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001fc0:	1ad3      	subs	r3, r2, r3
 8001fc2:	2b02      	cmp	r3, #2
 8001fc4:	d901      	bls.n	8001fca <RCC_SetFlashLatency+0xda>
    {
      return HAL_TIMEOUT;
 8001fc6:	2303      	movs	r3, #3
 8001fc8:	e007      	b.n	8001fda <RCC_SetFlashLatency+0xea>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8001fca:	4b09      	ldr	r3, [pc, #36]	; (8001ff0 <RCC_SetFlashLatency+0x100>)
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	f003 0307 	and.w	r3, r3, #7
 8001fd2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001fd4:	429a      	cmp	r2, r3
 8001fd6:	d1ef      	bne.n	8001fb8 <RCC_SetFlashLatency+0xc8>
    }
  }
  return HAL_OK;
 8001fd8:	2300      	movs	r3, #0
}
 8001fda:	4618      	mov	r0, r3
 8001fdc:	3738      	adds	r7, #56	; 0x38
 8001fde:	46bd      	mov	sp, r7
 8001fe0:	bd80      	pop	{r7, pc}
 8001fe2:	bf00      	nop
 8001fe4:	08002fbc 	.word	0x08002fbc
 8001fe8:	08002fc4 	.word	0x08002fc4
 8001fec:	08002fcc 	.word	0x08002fcc
 8001ff0:	58004000 	.word	0x58004000

08001ff4 <LL_RCC_LSE_IsReady>:
{
 8001ff4:	b480      	push	{r7}
 8001ff6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8001ff8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ffc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002000:	f003 0302 	and.w	r3, r3, #2
 8002004:	2b02      	cmp	r3, #2
 8002006:	d101      	bne.n	800200c <LL_RCC_LSE_IsReady+0x18>
 8002008:	2301      	movs	r3, #1
 800200a:	e000      	b.n	800200e <LL_RCC_LSE_IsReady+0x1a>
 800200c:	2300      	movs	r3, #0
}
 800200e:	4618      	mov	r0, r3
 8002010:	46bd      	mov	sp, r7
 8002012:	bc80      	pop	{r7}
 8002014:	4770      	bx	lr

08002016 <LL_RCC_SetUSARTClockSource>:
{
 8002016:	b480      	push	{r7}
 8002018:	b083      	sub	sp, #12
 800201a:	af00      	add	r7, sp, #0
 800201c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (USARTxSource >> 16), (USARTxSource & 0x0000FFFFU));
 800201e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002022:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	0c1b      	lsrs	r3, r3, #16
 800202a:	43db      	mvns	r3, r3
 800202c:	401a      	ands	r2, r3
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	b29b      	uxth	r3, r3
 8002032:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002036:	4313      	orrs	r3, r2
 8002038:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800203c:	bf00      	nop
 800203e:	370c      	adds	r7, #12
 8002040:	46bd      	mov	sp, r7
 8002042:	bc80      	pop	{r7}
 8002044:	4770      	bx	lr

08002046 <LL_RCC_SetI2SClockSource>:
{
 8002046:	b480      	push	{r7}
 8002048:	b083      	sub	sp, #12
 800204a:	af00      	add	r7, sp, #0
 800204c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_I2S2SEL, I2SxSource);
 800204e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002052:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002056:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800205a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	4313      	orrs	r3, r2
 8002062:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002066:	bf00      	nop
 8002068:	370c      	adds	r7, #12
 800206a:	46bd      	mov	sp, r7
 800206c:	bc80      	pop	{r7}
 800206e:	4770      	bx	lr

08002070 <LL_RCC_SetLPUARTClockSource>:
{
 8002070:	b480      	push	{r7}
 8002072:	b083      	sub	sp, #12
 8002074:	af00      	add	r7, sp, #0
 8002076:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8002078:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800207c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002080:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002084:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	4313      	orrs	r3, r2
 800208c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002090:	bf00      	nop
 8002092:	370c      	adds	r7, #12
 8002094:	46bd      	mov	sp, r7
 8002096:	bc80      	pop	{r7}
 8002098:	4770      	bx	lr

0800209a <LL_RCC_SetI2CClockSource>:
{
 800209a:	b480      	push	{r7}
 800209c:	b083      	sub	sp, #12
 800209e:	af00      	add	r7, sp, #0
 80020a0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 80020a2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80020a6:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	091b      	lsrs	r3, r3, #4
 80020ae:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 80020b2:	43db      	mvns	r3, r3
 80020b4:	401a      	ands	r2, r3
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	011b      	lsls	r3, r3, #4
 80020ba:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 80020be:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80020c2:	4313      	orrs	r3, r2
 80020c4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80020c8:	bf00      	nop
 80020ca:	370c      	adds	r7, #12
 80020cc:	46bd      	mov	sp, r7
 80020ce:	bc80      	pop	{r7}
 80020d0:	4770      	bx	lr

080020d2 <LL_RCC_SetLPTIMClockSource>:
{
 80020d2:	b480      	push	{r7}
 80020d4:	b083      	sub	sp, #12
 80020d6:	af00      	add	r7, sp, #0
 80020d8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 80020da:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80020de:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	0c1b      	lsrs	r3, r3, #16
 80020e6:	041b      	lsls	r3, r3, #16
 80020e8:	43db      	mvns	r3, r3
 80020ea:	401a      	ands	r2, r3
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	041b      	lsls	r3, r3, #16
 80020f0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80020f4:	4313      	orrs	r3, r2
 80020f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80020fa:	bf00      	nop
 80020fc:	370c      	adds	r7, #12
 80020fe:	46bd      	mov	sp, r7
 8002100:	bc80      	pop	{r7}
 8002102:	4770      	bx	lr

08002104 <LL_RCC_SetRNGClockSource>:
{
 8002104:	b480      	push	{r7}
 8002106:	b083      	sub	sp, #12
 8002108:	af00      	add	r7, sp, #0
 800210a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 800210c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002110:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002114:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8002118:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	4313      	orrs	r3, r2
 8002120:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002124:	bf00      	nop
 8002126:	370c      	adds	r7, #12
 8002128:	46bd      	mov	sp, r7
 800212a:	bc80      	pop	{r7}
 800212c:	4770      	bx	lr

0800212e <LL_RCC_SetADCClockSource>:
{
 800212e:	b480      	push	{r7}
 8002130:	b083      	sub	sp, #12
 8002132:	af00      	add	r7, sp, #0
 8002134:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8002136:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800213a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800213e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002142:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	4313      	orrs	r3, r2
 800214a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800214e:	bf00      	nop
 8002150:	370c      	adds	r7, #12
 8002152:	46bd      	mov	sp, r7
 8002154:	bc80      	pop	{r7}
 8002156:	4770      	bx	lr

08002158 <LL_RCC_SetRTCClockSource>:
{
 8002158:	b480      	push	{r7}
 800215a:	b083      	sub	sp, #12
 800215c:	af00      	add	r7, sp, #0
 800215e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8002160:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002164:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002168:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800216c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	4313      	orrs	r3, r2
 8002174:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8002178:	bf00      	nop
 800217a:	370c      	adds	r7, #12
 800217c:	46bd      	mov	sp, r7
 800217e:	bc80      	pop	{r7}
 8002180:	4770      	bx	lr

08002182 <LL_RCC_GetRTCClockSource>:
{
 8002182:	b480      	push	{r7}
 8002184:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8002186:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800218a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800218e:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 8002192:	4618      	mov	r0, r3
 8002194:	46bd      	mov	sp, r7
 8002196:	bc80      	pop	{r7}
 8002198:	4770      	bx	lr

0800219a <LL_RCC_ForceBackupDomainReset>:
{
 800219a:	b480      	push	{r7}
 800219c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 800219e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80021a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021a6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80021aa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80021ae:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80021b2:	bf00      	nop
 80021b4:	46bd      	mov	sp, r7
 80021b6:	bc80      	pop	{r7}
 80021b8:	4770      	bx	lr

080021ba <LL_RCC_ReleaseBackupDomainReset>:
{
 80021ba:	b480      	push	{r7}
 80021bc:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 80021be:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80021c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021c6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80021ca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80021ce:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80021d2:	bf00      	nop
 80021d4:	46bd      	mov	sp, r7
 80021d6:	bc80      	pop	{r7}
 80021d8:	4770      	bx	lr
	...

080021dc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80021dc:	b580      	push	{r7, lr}
 80021de:	b086      	sub	sp, #24
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister = 0;
 80021e4:	2300      	movs	r3, #0
 80021e6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;   /* Intermediate status */
 80021e8:	2300      	movs	r3, #0
 80021ea:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 80021ec:	2300      	movs	r3, #0
 80021ee:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d058      	beq.n	80022ae <HAL_RCCEx_PeriphCLKConfig+0xd2>
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));


    /* Enable write access to Backup domain */
    HAL_PWR_EnableBkUpAccess();
 80021fc:	f7fe fdc2 	bl	8000d84 <HAL_PWR_EnableBkUpAccess>

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002200:	f7fe fb74 	bl	80008ec <HAL_GetTick>
 8002204:	60f8      	str	r0, [r7, #12]

    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 8002206:	e009      	b.n	800221c <HAL_RCCEx_PeriphCLKConfig+0x40>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002208:	f7fe fb70 	bl	80008ec <HAL_GetTick>
 800220c:	4602      	mov	r2, r0
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	1ad3      	subs	r3, r2, r3
 8002212:	2b02      	cmp	r3, #2
 8002214:	d902      	bls.n	800221c <HAL_RCCEx_PeriphCLKConfig+0x40>
      {
        ret = HAL_TIMEOUT;
 8002216:	2303      	movs	r3, #3
 8002218:	74fb      	strb	r3, [r7, #19]
        break;
 800221a:	e006      	b.n	800222a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 800221c:	4b7b      	ldr	r3, [pc, #492]	; (800240c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002224:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002228:	d1ee      	bne.n	8002208 <HAL_RCCEx_PeriphCLKConfig+0x2c>
      }
    }

    if (ret == HAL_OK)
 800222a:	7cfb      	ldrb	r3, [r7, #19]
 800222c:	2b00      	cmp	r3, #0
 800222e:	d13c      	bne.n	80022aa <HAL_RCCEx_PeriphCLKConfig+0xce>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if (LL_RCC_GetRTCClockSource() != PeriphClkInit->RTCClockSelection)
 8002230:	f7ff ffa7 	bl	8002182 <LL_RCC_GetRTCClockSource>
 8002234:	4602      	mov	r2, r0
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800223a:	429a      	cmp	r2, r3
 800223c:	d00f      	beq.n	800225e <HAL_RCCEx_PeriphCLKConfig+0x82>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800223e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002242:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002246:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800224a:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800224c:	f7ff ffa5 	bl	800219a <LL_RCC_ForceBackupDomainReset>
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002250:	f7ff ffb3 	bl	80021ba <LL_RCC_ReleaseBackupDomainReset>

        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002254:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002258:	697b      	ldr	r3, [r7, #20]
 800225a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSERDY))
 800225e:	697b      	ldr	r3, [r7, #20]
 8002260:	f003 0302 	and.w	r3, r3, #2
 8002264:	2b00      	cmp	r3, #0
 8002266:	d014      	beq.n	8002292 <HAL_RCCEx_PeriphCLKConfig+0xb6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002268:	f7fe fb40 	bl	80008ec <HAL_GetTick>
 800226c:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while (LL_RCC_LSE_IsReady() != 1U)
 800226e:	e00b      	b.n	8002288 <HAL_RCCEx_PeriphCLKConfig+0xac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002270:	f7fe fb3c 	bl	80008ec <HAL_GetTick>
 8002274:	4602      	mov	r2, r0
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	1ad3      	subs	r3, r2, r3
 800227a:	f241 3288 	movw	r2, #5000	; 0x1388
 800227e:	4293      	cmp	r3, r2
 8002280:	d902      	bls.n	8002288 <HAL_RCCEx_PeriphCLKConfig+0xac>
          {
            ret = HAL_TIMEOUT;
 8002282:	2303      	movs	r3, #3
 8002284:	74fb      	strb	r3, [r7, #19]
            break;
 8002286:	e004      	b.n	8002292 <HAL_RCCEx_PeriphCLKConfig+0xb6>
        while (LL_RCC_LSE_IsReady() != 1U)
 8002288:	f7ff feb4 	bl	8001ff4 <LL_RCC_LSE_IsReady>
 800228c:	4603      	mov	r3, r0
 800228e:	2b01      	cmp	r3, #1
 8002290:	d1ee      	bne.n	8002270 <HAL_RCCEx_PeriphCLKConfig+0x94>
          }
        }
      }

      if (ret == HAL_OK)
 8002292:	7cfb      	ldrb	r3, [r7, #19]
 8002294:	2b00      	cmp	r3, #0
 8002296:	d105      	bne.n	80022a4 <HAL_RCCEx_PeriphCLKConfig+0xc8>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800229c:	4618      	mov	r0, r3
 800229e:	f7ff ff5b 	bl	8002158 <LL_RCC_SetRTCClockSource>
 80022a2:	e004      	b.n	80022ae <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80022a4:	7cfb      	ldrb	r3, [r7, #19]
 80022a6:	74bb      	strb	r3, [r7, #18]
 80022a8:	e001      	b.n	80022ae <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80022aa:	7cfb      	ldrb	r3, [r7, #19]
 80022ac:	74bb      	strb	r3, [r7, #18]
    }

  }

  /*-------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	f003 0301 	and.w	r3, r3, #1
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d004      	beq.n	80022c4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	685b      	ldr	r3, [r3, #4]
 80022be:	4618      	mov	r0, r3
 80022c0:	f7ff fea9 	bl	8002016 <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	f003 0302 	and.w	r3, r3, #2
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d004      	beq.n	80022da <HAL_RCCEx_PeriphCLKConfig+0xfe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	689b      	ldr	r3, [r3, #8]
 80022d4:	4618      	mov	r0, r3
 80022d6:	f7ff fe9e 	bl	8002016 <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	f003 0320 	and.w	r3, r3, #32
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d004      	beq.n	80022f0 <HAL_RCCEx_PeriphCLKConfig+0x114>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	691b      	ldr	r3, [r3, #16]
 80022ea:	4618      	mov	r0, r3
 80022ec:	f7ff fec0 	bl	8002070 <LL_RCC_SetLPUARTClockSource>
  }

  /*-------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d004      	beq.n	8002306 <HAL_RCCEx_PeriphCLKConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	6a1b      	ldr	r3, [r3, #32]
 8002300:	4618      	mov	r0, r3
 8002302:	f7ff fee6 	bl	80020d2 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800230e:	2b00      	cmp	r3, #0
 8002310:	d004      	beq.n	800231c <HAL_RCCEx_PeriphCLKConfig+0x140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));

    /* Configure the LPTIM2 clock source */
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002316:	4618      	mov	r0, r3
 8002318:	f7ff fedb 	bl	80020d2 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == (RCC_PERIPHCLK_LPTIM3))
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002324:	2b00      	cmp	r3, #0
 8002326:	d004      	beq.n	8002332 <HAL_RCCEx_PeriphCLKConfig+0x156>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLKSOURCE(PeriphClkInit->Lptim3ClockSelection));

    /* Configure the LPTIM3 clock source */
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800232c:	4618      	mov	r0, r3
 800232e:	f7ff fed0 	bl	80020d2 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800233a:	2b00      	cmp	r3, #0
 800233c:	d004      	beq.n	8002348 <HAL_RCCEx_PeriphCLKConfig+0x16c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	695b      	ldr	r3, [r3, #20]
 8002342:	4618      	mov	r0, r3
 8002344:	f7ff fea9 	bl	800209a <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002350:	2b00      	cmp	r3, #0
 8002352:	d004      	beq.n	800235e <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	699b      	ldr	r3, [r3, #24]
 8002358:	4618      	mov	r0, r3
 800235a:	f7ff fe9e 	bl	800209a <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002366:	2b00      	cmp	r3, #0
 8002368:	d004      	beq.n	8002374 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	69db      	ldr	r3, [r3, #28]
 800236e:	4618      	mov	r0, r3
 8002370:	f7ff fe93 	bl	800209a <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == (RCC_PERIPHCLK_I2S2))
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	f003 0310 	and.w	r3, r3, #16
 800237c:	2b00      	cmp	r3, #0
 800237e:	d011      	beq.n	80023a4 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	68db      	ldr	r3, [r3, #12]
 8002384:	4618      	mov	r0, r3
 8002386:	f7ff fe5e 	bl	8002046 <LL_RCC_SetI2SClockSource>

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	68db      	ldr	r3, [r3, #12]
 800238e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002392:	d107      	bne.n	80023a4 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
    {
      /* Enable RCC_PLL_I2S2CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_I2S2CLK);
 8002394:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002398:	68db      	ldr	r3, [r3, #12]
 800239a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800239e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80023a2:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d010      	beq.n	80023d2 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023b4:	4618      	mov	r0, r3
 80023b6:	f7ff fea5 	bl	8002104 <LL_RCC_SetRNGClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d107      	bne.n	80023d2 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 80023c2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80023c6:	68db      	ldr	r3, [r3, #12]
 80023c8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80023cc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80023d0:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d011      	beq.n	8002402 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023e2:	4618      	mov	r0, r3
 80023e4:	f7ff fea3 	bl	800212e <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023ec:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80023f0:	d107      	bne.n	8002402 <HAL_RCCEx_PeriphCLKConfig+0x226>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80023f2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80023f6:	68db      	ldr	r3, [r3, #12]
 80023f8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80023fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002400:	60d3      	str	r3, [r2, #12]
    }
  }

  return status;
 8002402:	7cbb      	ldrb	r3, [r7, #18]
}
 8002404:	4618      	mov	r0, r3
 8002406:	3718      	adds	r7, #24
 8002408:	46bd      	mov	sp, r7
 800240a:	bd80      	pop	{r7, pc}
 800240c:	58000400 	.word	0x58000400

08002410 <LL_RCC_GetUSARTClockSource>:
{
 8002410:	b480      	push	{r7}
 8002412:	b083      	sub	sp, #12
 8002414:	af00      	add	r7, sp, #0
 8002416:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16));
 8002418:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800241c:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	401a      	ands	r2, r3
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	041b      	lsls	r3, r3, #16
 8002428:	4313      	orrs	r3, r2
}
 800242a:	4618      	mov	r0, r3
 800242c:	370c      	adds	r7, #12
 800242e:	46bd      	mov	sp, r7
 8002430:	bc80      	pop	{r7}
 8002432:	4770      	bx	lr

08002434 <LL_RCC_GetLPUARTClockSource>:
{
 8002434:	b480      	push	{r7}
 8002436:	b083      	sub	sp, #12
 8002438:	af00      	add	r7, sp, #0
 800243a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 800243c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002440:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	4013      	ands	r3, r2
}
 8002448:	4618      	mov	r0, r3
 800244a:	370c      	adds	r7, #12
 800244c:	46bd      	mov	sp, r7
 800244e:	bc80      	pop	{r7}
 8002450:	4770      	bx	lr

08002452 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002452:	b580      	push	{r7, lr}
 8002454:	b082      	sub	sp, #8
 8002456:	af00      	add	r7, sp, #0
 8002458:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	2b00      	cmp	r3, #0
 800245e:	d101      	bne.n	8002464 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002460:	2301      	movs	r3, #1
 8002462:	e042      	b.n	80024ea <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800246a:	2b00      	cmp	r3, #0
 800246c:	d106      	bne.n	800247c <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	2200      	movs	r2, #0
 8002472:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002476:	6878      	ldr	r0, [r7, #4]
 8002478:	f7fe f934 	bl	80006e4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	2224      	movs	r2, #36	; 0x24
 8002480:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	681a      	ldr	r2, [r3, #0]
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	f022 0201 	bic.w	r2, r2, #1
 8002492:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002494:	6878      	ldr	r0, [r7, #4]
 8002496:	f000 f82d 	bl	80024f4 <UART_SetConfig>
 800249a:	4603      	mov	r3, r0
 800249c:	2b01      	cmp	r3, #1
 800249e:	d101      	bne.n	80024a4 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80024a0:	2301      	movs	r3, #1
 80024a2:	e022      	b.n	80024ea <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d002      	beq.n	80024b2 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80024ac:	6878      	ldr	r0, [r7, #4]
 80024ae:	f000 fa95 	bl	80029dc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	685a      	ldr	r2, [r3, #4]
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80024c0:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	689a      	ldr	r2, [r3, #8]
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80024d0:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	681a      	ldr	r2, [r3, #0]
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	f042 0201 	orr.w	r2, r2, #1
 80024e0:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80024e2:	6878      	ldr	r0, [r7, #4]
 80024e4:	f000 fb1b 	bl	8002b1e <UART_CheckIdleState>
 80024e8:	4603      	mov	r3, r0
}
 80024ea:	4618      	mov	r0, r3
 80024ec:	3708      	adds	r7, #8
 80024ee:	46bd      	mov	sp, r7
 80024f0:	bd80      	pop	{r7, pc}
	...

080024f4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80024f4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80024f8:	b08c      	sub	sp, #48	; 0x30
 80024fa:	af00      	add	r7, sp, #0
 80024fc:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80024fe:	2300      	movs	r3, #0
 8002500:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002504:	697b      	ldr	r3, [r7, #20]
 8002506:	689a      	ldr	r2, [r3, #8]
 8002508:	697b      	ldr	r3, [r7, #20]
 800250a:	691b      	ldr	r3, [r3, #16]
 800250c:	431a      	orrs	r2, r3
 800250e:	697b      	ldr	r3, [r7, #20]
 8002510:	695b      	ldr	r3, [r3, #20]
 8002512:	431a      	orrs	r2, r3
 8002514:	697b      	ldr	r3, [r7, #20]
 8002516:	69db      	ldr	r3, [r3, #28]
 8002518:	4313      	orrs	r3, r2
 800251a:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800251c:	697b      	ldr	r3, [r7, #20]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	681a      	ldr	r2, [r3, #0]
 8002522:	4b94      	ldr	r3, [pc, #592]	; (8002774 <UART_SetConfig+0x280>)
 8002524:	4013      	ands	r3, r2
 8002526:	697a      	ldr	r2, [r7, #20]
 8002528:	6812      	ldr	r2, [r2, #0]
 800252a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800252c:	430b      	orrs	r3, r1
 800252e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002530:	697b      	ldr	r3, [r7, #20]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	685b      	ldr	r3, [r3, #4]
 8002536:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800253a:	697b      	ldr	r3, [r7, #20]
 800253c:	68da      	ldr	r2, [r3, #12]
 800253e:	697b      	ldr	r3, [r7, #20]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	430a      	orrs	r2, r1
 8002544:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002546:	697b      	ldr	r3, [r7, #20]
 8002548:	699b      	ldr	r3, [r3, #24]
 800254a:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800254c:	697b      	ldr	r3, [r7, #20]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	4a89      	ldr	r2, [pc, #548]	; (8002778 <UART_SetConfig+0x284>)
 8002552:	4293      	cmp	r3, r2
 8002554:	d004      	beq.n	8002560 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002556:	697b      	ldr	r3, [r7, #20]
 8002558:	6a1b      	ldr	r3, [r3, #32]
 800255a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800255c:	4313      	orrs	r3, r2
 800255e:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002560:	697b      	ldr	r3, [r7, #20]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	689b      	ldr	r3, [r3, #8]
 8002566:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 800256a:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800256e:	697a      	ldr	r2, [r7, #20]
 8002570:	6812      	ldr	r2, [r2, #0]
 8002572:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002574:	430b      	orrs	r3, r1
 8002576:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8002578:	697b      	ldr	r3, [r7, #20]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800257e:	f023 010f 	bic.w	r1, r3, #15
 8002582:	697b      	ldr	r3, [r7, #20]
 8002584:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002586:	697b      	ldr	r3, [r7, #20]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	430a      	orrs	r2, r1
 800258c:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800258e:	697b      	ldr	r3, [r7, #20]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	4a7a      	ldr	r2, [pc, #488]	; (800277c <UART_SetConfig+0x288>)
 8002594:	4293      	cmp	r3, r2
 8002596:	d127      	bne.n	80025e8 <UART_SetConfig+0xf4>
 8002598:	2003      	movs	r0, #3
 800259a:	f7ff ff39 	bl	8002410 <LL_RCC_GetUSARTClockSource>
 800259e:	4603      	mov	r3, r0
 80025a0:	f5a3 3340 	sub.w	r3, r3, #196608	; 0x30000
 80025a4:	2b03      	cmp	r3, #3
 80025a6:	d81b      	bhi.n	80025e0 <UART_SetConfig+0xec>
 80025a8:	a201      	add	r2, pc, #4	; (adr r2, 80025b0 <UART_SetConfig+0xbc>)
 80025aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80025ae:	bf00      	nop
 80025b0:	080025c1 	.word	0x080025c1
 80025b4:	080025d1 	.word	0x080025d1
 80025b8:	080025c9 	.word	0x080025c9
 80025bc:	080025d9 	.word	0x080025d9
 80025c0:	2301      	movs	r3, #1
 80025c2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80025c6:	e080      	b.n	80026ca <UART_SetConfig+0x1d6>
 80025c8:	2302      	movs	r3, #2
 80025ca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80025ce:	e07c      	b.n	80026ca <UART_SetConfig+0x1d6>
 80025d0:	2304      	movs	r3, #4
 80025d2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80025d6:	e078      	b.n	80026ca <UART_SetConfig+0x1d6>
 80025d8:	2308      	movs	r3, #8
 80025da:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80025de:	e074      	b.n	80026ca <UART_SetConfig+0x1d6>
 80025e0:	2310      	movs	r3, #16
 80025e2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80025e6:	e070      	b.n	80026ca <UART_SetConfig+0x1d6>
 80025e8:	697b      	ldr	r3, [r7, #20]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	4a64      	ldr	r2, [pc, #400]	; (8002780 <UART_SetConfig+0x28c>)
 80025ee:	4293      	cmp	r3, r2
 80025f0:	d138      	bne.n	8002664 <UART_SetConfig+0x170>
 80025f2:	200c      	movs	r0, #12
 80025f4:	f7ff ff0c 	bl	8002410 <LL_RCC_GetUSARTClockSource>
 80025f8:	4603      	mov	r3, r0
 80025fa:	f5a3 2340 	sub.w	r3, r3, #786432	; 0xc0000
 80025fe:	2b0c      	cmp	r3, #12
 8002600:	d82c      	bhi.n	800265c <UART_SetConfig+0x168>
 8002602:	a201      	add	r2, pc, #4	; (adr r2, 8002608 <UART_SetConfig+0x114>)
 8002604:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002608:	0800263d 	.word	0x0800263d
 800260c:	0800265d 	.word	0x0800265d
 8002610:	0800265d 	.word	0x0800265d
 8002614:	0800265d 	.word	0x0800265d
 8002618:	0800264d 	.word	0x0800264d
 800261c:	0800265d 	.word	0x0800265d
 8002620:	0800265d 	.word	0x0800265d
 8002624:	0800265d 	.word	0x0800265d
 8002628:	08002645 	.word	0x08002645
 800262c:	0800265d 	.word	0x0800265d
 8002630:	0800265d 	.word	0x0800265d
 8002634:	0800265d 	.word	0x0800265d
 8002638:	08002655 	.word	0x08002655
 800263c:	2300      	movs	r3, #0
 800263e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002642:	e042      	b.n	80026ca <UART_SetConfig+0x1d6>
 8002644:	2302      	movs	r3, #2
 8002646:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800264a:	e03e      	b.n	80026ca <UART_SetConfig+0x1d6>
 800264c:	2304      	movs	r3, #4
 800264e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002652:	e03a      	b.n	80026ca <UART_SetConfig+0x1d6>
 8002654:	2308      	movs	r3, #8
 8002656:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800265a:	e036      	b.n	80026ca <UART_SetConfig+0x1d6>
 800265c:	2310      	movs	r3, #16
 800265e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002662:	e032      	b.n	80026ca <UART_SetConfig+0x1d6>
 8002664:	697b      	ldr	r3, [r7, #20]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	4a43      	ldr	r2, [pc, #268]	; (8002778 <UART_SetConfig+0x284>)
 800266a:	4293      	cmp	r3, r2
 800266c:	d12a      	bne.n	80026c4 <UART_SetConfig+0x1d0>
 800266e:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 8002672:	f7ff fedf 	bl	8002434 <LL_RCC_GetLPUARTClockSource>
 8002676:	4603      	mov	r3, r0
 8002678:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800267c:	d01a      	beq.n	80026b4 <UART_SetConfig+0x1c0>
 800267e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002682:	d81b      	bhi.n	80026bc <UART_SetConfig+0x1c8>
 8002684:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002688:	d00c      	beq.n	80026a4 <UART_SetConfig+0x1b0>
 800268a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800268e:	d815      	bhi.n	80026bc <UART_SetConfig+0x1c8>
 8002690:	2b00      	cmp	r3, #0
 8002692:	d003      	beq.n	800269c <UART_SetConfig+0x1a8>
 8002694:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002698:	d008      	beq.n	80026ac <UART_SetConfig+0x1b8>
 800269a:	e00f      	b.n	80026bc <UART_SetConfig+0x1c8>
 800269c:	2300      	movs	r3, #0
 800269e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80026a2:	e012      	b.n	80026ca <UART_SetConfig+0x1d6>
 80026a4:	2302      	movs	r3, #2
 80026a6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80026aa:	e00e      	b.n	80026ca <UART_SetConfig+0x1d6>
 80026ac:	2304      	movs	r3, #4
 80026ae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80026b2:	e00a      	b.n	80026ca <UART_SetConfig+0x1d6>
 80026b4:	2308      	movs	r3, #8
 80026b6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80026ba:	e006      	b.n	80026ca <UART_SetConfig+0x1d6>
 80026bc:	2310      	movs	r3, #16
 80026be:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80026c2:	e002      	b.n	80026ca <UART_SetConfig+0x1d6>
 80026c4:	2310      	movs	r3, #16
 80026c6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80026ca:	697b      	ldr	r3, [r7, #20]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	4a2a      	ldr	r2, [pc, #168]	; (8002778 <UART_SetConfig+0x284>)
 80026d0:	4293      	cmp	r3, r2
 80026d2:	f040 80a4 	bne.w	800281e <UART_SetConfig+0x32a>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80026d6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80026da:	2b08      	cmp	r3, #8
 80026dc:	d823      	bhi.n	8002726 <UART_SetConfig+0x232>
 80026de:	a201      	add	r2, pc, #4	; (adr r2, 80026e4 <UART_SetConfig+0x1f0>)
 80026e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80026e4:	08002709 	.word	0x08002709
 80026e8:	08002727 	.word	0x08002727
 80026ec:	08002711 	.word	0x08002711
 80026f0:	08002727 	.word	0x08002727
 80026f4:	08002717 	.word	0x08002717
 80026f8:	08002727 	.word	0x08002727
 80026fc:	08002727 	.word	0x08002727
 8002700:	08002727 	.word	0x08002727
 8002704:	0800271f 	.word	0x0800271f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002708:	f7ff fb9e 	bl	8001e48 <HAL_RCC_GetPCLK1Freq>
 800270c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800270e:	e010      	b.n	8002732 <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002710:	4b1c      	ldr	r3, [pc, #112]	; (8002784 <UART_SetConfig+0x290>)
 8002712:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8002714:	e00d      	b.n	8002732 <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002716:	f7ff fae3 	bl	8001ce0 <HAL_RCC_GetSysClockFreq>
 800271a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800271c:	e009      	b.n	8002732 <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800271e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002722:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8002724:	e005      	b.n	8002732 <UART_SetConfig+0x23e>
      default:
        pclk = 0U;
 8002726:	2300      	movs	r3, #0
 8002728:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800272a:	2301      	movs	r3, #1
 800272c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8002730:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8002732:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002734:	2b00      	cmp	r3, #0
 8002736:	f000 8137 	beq.w	80029a8 <UART_SetConfig+0x4b4>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800273a:	697b      	ldr	r3, [r7, #20]
 800273c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800273e:	4a12      	ldr	r2, [pc, #72]	; (8002788 <UART_SetConfig+0x294>)
 8002740:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002744:	461a      	mov	r2, r3
 8002746:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002748:	fbb3 f3f2 	udiv	r3, r3, r2
 800274c:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800274e:	697b      	ldr	r3, [r7, #20]
 8002750:	685a      	ldr	r2, [r3, #4]
 8002752:	4613      	mov	r3, r2
 8002754:	005b      	lsls	r3, r3, #1
 8002756:	4413      	add	r3, r2
 8002758:	69ba      	ldr	r2, [r7, #24]
 800275a:	429a      	cmp	r2, r3
 800275c:	d305      	bcc.n	800276a <UART_SetConfig+0x276>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800275e:	697b      	ldr	r3, [r7, #20]
 8002760:	685b      	ldr	r3, [r3, #4]
 8002762:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8002764:	69ba      	ldr	r2, [r7, #24]
 8002766:	429a      	cmp	r2, r3
 8002768:	d910      	bls.n	800278c <UART_SetConfig+0x298>
      {
        ret = HAL_ERROR;
 800276a:	2301      	movs	r3, #1
 800276c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8002770:	e11a      	b.n	80029a8 <UART_SetConfig+0x4b4>
 8002772:	bf00      	nop
 8002774:	cfff69f3 	.word	0xcfff69f3
 8002778:	40008000 	.word	0x40008000
 800277c:	40013800 	.word	0x40013800
 8002780:	40004400 	.word	0x40004400
 8002784:	00f42400 	.word	0x00f42400
 8002788:	08003078 	.word	0x08003078
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800278c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800278e:	2200      	movs	r2, #0
 8002790:	60bb      	str	r3, [r7, #8]
 8002792:	60fa      	str	r2, [r7, #12]
 8002794:	697b      	ldr	r3, [r7, #20]
 8002796:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002798:	4a8e      	ldr	r2, [pc, #568]	; (80029d4 <UART_SetConfig+0x4e0>)
 800279a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800279e:	b29b      	uxth	r3, r3
 80027a0:	2200      	movs	r2, #0
 80027a2:	603b      	str	r3, [r7, #0]
 80027a4:	607a      	str	r2, [r7, #4]
 80027a6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80027aa:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80027ae:	f7fd fce3 	bl	8000178 <__aeabi_uldivmod>
 80027b2:	4602      	mov	r2, r0
 80027b4:	460b      	mov	r3, r1
 80027b6:	4610      	mov	r0, r2
 80027b8:	4619      	mov	r1, r3
 80027ba:	f04f 0200 	mov.w	r2, #0
 80027be:	f04f 0300 	mov.w	r3, #0
 80027c2:	020b      	lsls	r3, r1, #8
 80027c4:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80027c8:	0202      	lsls	r2, r0, #8
 80027ca:	6979      	ldr	r1, [r7, #20]
 80027cc:	6849      	ldr	r1, [r1, #4]
 80027ce:	0849      	lsrs	r1, r1, #1
 80027d0:	2000      	movs	r0, #0
 80027d2:	460c      	mov	r4, r1
 80027d4:	4605      	mov	r5, r0
 80027d6:	eb12 0804 	adds.w	r8, r2, r4
 80027da:	eb43 0905 	adc.w	r9, r3, r5
 80027de:	697b      	ldr	r3, [r7, #20]
 80027e0:	685b      	ldr	r3, [r3, #4]
 80027e2:	2200      	movs	r2, #0
 80027e4:	469a      	mov	sl, r3
 80027e6:	4693      	mov	fp, r2
 80027e8:	4652      	mov	r2, sl
 80027ea:	465b      	mov	r3, fp
 80027ec:	4640      	mov	r0, r8
 80027ee:	4649      	mov	r1, r9
 80027f0:	f7fd fcc2 	bl	8000178 <__aeabi_uldivmod>
 80027f4:	4602      	mov	r2, r0
 80027f6:	460b      	mov	r3, r1
 80027f8:	4613      	mov	r3, r2
 80027fa:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80027fc:	6a3b      	ldr	r3, [r7, #32]
 80027fe:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002802:	d308      	bcc.n	8002816 <UART_SetConfig+0x322>
 8002804:	6a3b      	ldr	r3, [r7, #32]
 8002806:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800280a:	d204      	bcs.n	8002816 <UART_SetConfig+0x322>
        {
          huart->Instance->BRR = usartdiv;
 800280c:	697b      	ldr	r3, [r7, #20]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	6a3a      	ldr	r2, [r7, #32]
 8002812:	60da      	str	r2, [r3, #12]
 8002814:	e0c8      	b.n	80029a8 <UART_SetConfig+0x4b4>
        }
        else
        {
          ret = HAL_ERROR;
 8002816:	2301      	movs	r3, #1
 8002818:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800281c:	e0c4      	b.n	80029a8 <UART_SetConfig+0x4b4>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800281e:	697b      	ldr	r3, [r7, #20]
 8002820:	69db      	ldr	r3, [r3, #28]
 8002822:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002826:	d167      	bne.n	80028f8 <UART_SetConfig+0x404>
  {
    switch (clocksource)
 8002828:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800282c:	2b08      	cmp	r3, #8
 800282e:	d828      	bhi.n	8002882 <UART_SetConfig+0x38e>
 8002830:	a201      	add	r2, pc, #4	; (adr r2, 8002838 <UART_SetConfig+0x344>)
 8002832:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002836:	bf00      	nop
 8002838:	0800285d 	.word	0x0800285d
 800283c:	08002865 	.word	0x08002865
 8002840:	0800286d 	.word	0x0800286d
 8002844:	08002883 	.word	0x08002883
 8002848:	08002873 	.word	0x08002873
 800284c:	08002883 	.word	0x08002883
 8002850:	08002883 	.word	0x08002883
 8002854:	08002883 	.word	0x08002883
 8002858:	0800287b 	.word	0x0800287b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800285c:	f7ff faf4 	bl	8001e48 <HAL_RCC_GetPCLK1Freq>
 8002860:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8002862:	e014      	b.n	800288e <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002864:	f7ff fb02 	bl	8001e6c <HAL_RCC_GetPCLK2Freq>
 8002868:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800286a:	e010      	b.n	800288e <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800286c:	4b5a      	ldr	r3, [pc, #360]	; (80029d8 <UART_SetConfig+0x4e4>)
 800286e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8002870:	e00d      	b.n	800288e <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002872:	f7ff fa35 	bl	8001ce0 <HAL_RCC_GetSysClockFreq>
 8002876:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8002878:	e009      	b.n	800288e <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800287a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800287e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8002880:	e005      	b.n	800288e <UART_SetConfig+0x39a>
      default:
        pclk = 0U;
 8002882:	2300      	movs	r3, #0
 8002884:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8002886:	2301      	movs	r3, #1
 8002888:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800288c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800288e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002890:	2b00      	cmp	r3, #0
 8002892:	f000 8089 	beq.w	80029a8 <UART_SetConfig+0x4b4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002896:	697b      	ldr	r3, [r7, #20]
 8002898:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800289a:	4a4e      	ldr	r2, [pc, #312]	; (80029d4 <UART_SetConfig+0x4e0>)
 800289c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80028a0:	461a      	mov	r2, r3
 80028a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028a4:	fbb3 f3f2 	udiv	r3, r3, r2
 80028a8:	005a      	lsls	r2, r3, #1
 80028aa:	697b      	ldr	r3, [r7, #20]
 80028ac:	685b      	ldr	r3, [r3, #4]
 80028ae:	085b      	lsrs	r3, r3, #1
 80028b0:	441a      	add	r2, r3
 80028b2:	697b      	ldr	r3, [r7, #20]
 80028b4:	685b      	ldr	r3, [r3, #4]
 80028b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80028ba:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80028bc:	6a3b      	ldr	r3, [r7, #32]
 80028be:	2b0f      	cmp	r3, #15
 80028c0:	d916      	bls.n	80028f0 <UART_SetConfig+0x3fc>
 80028c2:	6a3b      	ldr	r3, [r7, #32]
 80028c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80028c8:	d212      	bcs.n	80028f0 <UART_SetConfig+0x3fc>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80028ca:	6a3b      	ldr	r3, [r7, #32]
 80028cc:	b29b      	uxth	r3, r3
 80028ce:	f023 030f 	bic.w	r3, r3, #15
 80028d2:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80028d4:	6a3b      	ldr	r3, [r7, #32]
 80028d6:	085b      	lsrs	r3, r3, #1
 80028d8:	b29b      	uxth	r3, r3
 80028da:	f003 0307 	and.w	r3, r3, #7
 80028de:	b29a      	uxth	r2, r3
 80028e0:	8bfb      	ldrh	r3, [r7, #30]
 80028e2:	4313      	orrs	r3, r2
 80028e4:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80028e6:	697b      	ldr	r3, [r7, #20]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	8bfa      	ldrh	r2, [r7, #30]
 80028ec:	60da      	str	r2, [r3, #12]
 80028ee:	e05b      	b.n	80029a8 <UART_SetConfig+0x4b4>
      }
      else
      {
        ret = HAL_ERROR;
 80028f0:	2301      	movs	r3, #1
 80028f2:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80028f6:	e057      	b.n	80029a8 <UART_SetConfig+0x4b4>
      }
    }
  }
  else
  {
    switch (clocksource)
 80028f8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80028fc:	2b08      	cmp	r3, #8
 80028fe:	d828      	bhi.n	8002952 <UART_SetConfig+0x45e>
 8002900:	a201      	add	r2, pc, #4	; (adr r2, 8002908 <UART_SetConfig+0x414>)
 8002902:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002906:	bf00      	nop
 8002908:	0800292d 	.word	0x0800292d
 800290c:	08002935 	.word	0x08002935
 8002910:	0800293d 	.word	0x0800293d
 8002914:	08002953 	.word	0x08002953
 8002918:	08002943 	.word	0x08002943
 800291c:	08002953 	.word	0x08002953
 8002920:	08002953 	.word	0x08002953
 8002924:	08002953 	.word	0x08002953
 8002928:	0800294b 	.word	0x0800294b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800292c:	f7ff fa8c 	bl	8001e48 <HAL_RCC_GetPCLK1Freq>
 8002930:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8002932:	e014      	b.n	800295e <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002934:	f7ff fa9a 	bl	8001e6c <HAL_RCC_GetPCLK2Freq>
 8002938:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800293a:	e010      	b.n	800295e <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800293c:	4b26      	ldr	r3, [pc, #152]	; (80029d8 <UART_SetConfig+0x4e4>)
 800293e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8002940:	e00d      	b.n	800295e <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002942:	f7ff f9cd 	bl	8001ce0 <HAL_RCC_GetSysClockFreq>
 8002946:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8002948:	e009      	b.n	800295e <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800294a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800294e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8002950:	e005      	b.n	800295e <UART_SetConfig+0x46a>
      default:
        pclk = 0U;
 8002952:	2300      	movs	r3, #0
 8002954:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8002956:	2301      	movs	r3, #1
 8002958:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800295c:	bf00      	nop
    }

    if (pclk != 0U)
 800295e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002960:	2b00      	cmp	r3, #0
 8002962:	d021      	beq.n	80029a8 <UART_SetConfig+0x4b4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002964:	697b      	ldr	r3, [r7, #20]
 8002966:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002968:	4a1a      	ldr	r2, [pc, #104]	; (80029d4 <UART_SetConfig+0x4e0>)
 800296a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800296e:	461a      	mov	r2, r3
 8002970:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002972:	fbb3 f2f2 	udiv	r2, r3, r2
 8002976:	697b      	ldr	r3, [r7, #20]
 8002978:	685b      	ldr	r3, [r3, #4]
 800297a:	085b      	lsrs	r3, r3, #1
 800297c:	441a      	add	r2, r3
 800297e:	697b      	ldr	r3, [r7, #20]
 8002980:	685b      	ldr	r3, [r3, #4]
 8002982:	fbb2 f3f3 	udiv	r3, r2, r3
 8002986:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002988:	6a3b      	ldr	r3, [r7, #32]
 800298a:	2b0f      	cmp	r3, #15
 800298c:	d909      	bls.n	80029a2 <UART_SetConfig+0x4ae>
 800298e:	6a3b      	ldr	r3, [r7, #32]
 8002990:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002994:	d205      	bcs.n	80029a2 <UART_SetConfig+0x4ae>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8002996:	6a3b      	ldr	r3, [r7, #32]
 8002998:	b29a      	uxth	r2, r3
 800299a:	697b      	ldr	r3, [r7, #20]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	60da      	str	r2, [r3, #12]
 80029a0:	e002      	b.n	80029a8 <UART_SetConfig+0x4b4>
      }
      else
      {
        ret = HAL_ERROR;
 80029a2:	2301      	movs	r3, #1
 80029a4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80029a8:	697b      	ldr	r3, [r7, #20]
 80029aa:	2201      	movs	r2, #1
 80029ac:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80029b0:	697b      	ldr	r3, [r7, #20]
 80029b2:	2201      	movs	r2, #1
 80029b4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80029b8:	697b      	ldr	r3, [r7, #20]
 80029ba:	2200      	movs	r2, #0
 80029bc:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 80029be:	697b      	ldr	r3, [r7, #20]
 80029c0:	2200      	movs	r2, #0
 80029c2:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 80029c4:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 80029c8:	4618      	mov	r0, r3
 80029ca:	3730      	adds	r7, #48	; 0x30
 80029cc:	46bd      	mov	sp, r7
 80029ce:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80029d2:	bf00      	nop
 80029d4:	08003078 	.word	0x08003078
 80029d8:	00f42400 	.word	0x00f42400

080029dc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80029dc:	b480      	push	{r7}
 80029de:	b083      	sub	sp, #12
 80029e0:	af00      	add	r7, sp, #0
 80029e2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029e8:	f003 0301 	and.w	r3, r3, #1
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d00a      	beq.n	8002a06 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	685b      	ldr	r3, [r3, #4]
 80029f6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	430a      	orrs	r2, r1
 8002a04:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a0a:	f003 0302 	and.w	r3, r3, #2
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d00a      	beq.n	8002a28 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	685b      	ldr	r3, [r3, #4]
 8002a18:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	430a      	orrs	r2, r1
 8002a26:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a2c:	f003 0304 	and.w	r3, r3, #4
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d00a      	beq.n	8002a4a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	685b      	ldr	r3, [r3, #4]
 8002a3a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	430a      	orrs	r2, r1
 8002a48:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a4e:	f003 0308 	and.w	r3, r3, #8
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d00a      	beq.n	8002a6c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	685b      	ldr	r3, [r3, #4]
 8002a5c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	430a      	orrs	r2, r1
 8002a6a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a70:	f003 0310 	and.w	r3, r3, #16
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d00a      	beq.n	8002a8e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	689b      	ldr	r3, [r3, #8]
 8002a7e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	430a      	orrs	r2, r1
 8002a8c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a92:	f003 0320 	and.w	r3, r3, #32
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d00a      	beq.n	8002ab0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	689b      	ldr	r3, [r3, #8]
 8002aa0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	430a      	orrs	r2, r1
 8002aae:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ab4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d01a      	beq.n	8002af2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	685b      	ldr	r3, [r3, #4]
 8002ac2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	430a      	orrs	r2, r1
 8002ad0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ad6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002ada:	d10a      	bne.n	8002af2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	685b      	ldr	r3, [r3, #4]
 8002ae2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	430a      	orrs	r2, r1
 8002af0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002af6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d00a      	beq.n	8002b14 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	685b      	ldr	r3, [r3, #4]
 8002b04:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	430a      	orrs	r2, r1
 8002b12:	605a      	str	r2, [r3, #4]
  }
}
 8002b14:	bf00      	nop
 8002b16:	370c      	adds	r7, #12
 8002b18:	46bd      	mov	sp, r7
 8002b1a:	bc80      	pop	{r7}
 8002b1c:	4770      	bx	lr

08002b1e <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002b1e:	b580      	push	{r7, lr}
 8002b20:	b086      	sub	sp, #24
 8002b22:	af02      	add	r7, sp, #8
 8002b24:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	2200      	movs	r2, #0
 8002b2a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002b2e:	f7fd fedd 	bl	80008ec <HAL_GetTick>
 8002b32:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	f003 0308 	and.w	r3, r3, #8
 8002b3e:	2b08      	cmp	r3, #8
 8002b40:	d10e      	bne.n	8002b60 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002b42:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002b46:	9300      	str	r3, [sp, #0]
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	2200      	movs	r2, #0
 8002b4c:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8002b50:	6878      	ldr	r0, [r7, #4]
 8002b52:	f000 f832 	bl	8002bba <UART_WaitOnFlagUntilTimeout>
 8002b56:	4603      	mov	r3, r0
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d001      	beq.n	8002b60 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002b5c:	2303      	movs	r3, #3
 8002b5e:	e028      	b.n	8002bb2 <UART_CheckIdleState+0x94>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	f003 0304 	and.w	r3, r3, #4
 8002b6a:	2b04      	cmp	r3, #4
 8002b6c:	d10e      	bne.n	8002b8c <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002b6e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002b72:	9300      	str	r3, [sp, #0]
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	2200      	movs	r2, #0
 8002b78:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8002b7c:	6878      	ldr	r0, [r7, #4]
 8002b7e:	f000 f81c 	bl	8002bba <UART_WaitOnFlagUntilTimeout>
 8002b82:	4603      	mov	r3, r0
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d001      	beq.n	8002b8c <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002b88:	2303      	movs	r3, #3
 8002b8a:	e012      	b.n	8002bb2 <UART_CheckIdleState+0x94>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	2220      	movs	r2, #32
 8002b90:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	2220      	movs	r2, #32
 8002b98:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	2200      	movs	r2, #0
 8002ba0:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	2200      	movs	r2, #0
 8002ba6:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	2200      	movs	r2, #0
 8002bac:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8002bb0:	2300      	movs	r3, #0
}
 8002bb2:	4618      	mov	r0, r3
 8002bb4:	3710      	adds	r7, #16
 8002bb6:	46bd      	mov	sp, r7
 8002bb8:	bd80      	pop	{r7, pc}

08002bba <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002bba:	b580      	push	{r7, lr}
 8002bbc:	b09c      	sub	sp, #112	; 0x70
 8002bbe:	af00      	add	r7, sp, #0
 8002bc0:	60f8      	str	r0, [r7, #12]
 8002bc2:	60b9      	str	r1, [r7, #8]
 8002bc4:	603b      	str	r3, [r7, #0]
 8002bc6:	4613      	mov	r3, r2
 8002bc8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002bca:	e0a9      	b.n	8002d20 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002bcc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002bce:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002bd2:	f000 80a5 	beq.w	8002d20 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002bd6:	f7fd fe89 	bl	80008ec <HAL_GetTick>
 8002bda:	4602      	mov	r2, r0
 8002bdc:	683b      	ldr	r3, [r7, #0]
 8002bde:	1ad3      	subs	r3, r2, r3
 8002be0:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8002be2:	429a      	cmp	r2, r3
 8002be4:	d302      	bcc.n	8002bec <UART_WaitOnFlagUntilTimeout+0x32>
 8002be6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d140      	bne.n	8002c6e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002bf2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002bf4:	e853 3f00 	ldrex	r3, [r3]
 8002bf8:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8002bfa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002bfc:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002c00:	667b      	str	r3, [r7, #100]	; 0x64
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	461a      	mov	r2, r3
 8002c08:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002c0a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002c0c:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c0e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8002c10:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8002c12:	e841 2300 	strex	r3, r2, [r1]
 8002c16:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8002c18:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d1e6      	bne.n	8002bec <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	3308      	adds	r3, #8
 8002c24:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c26:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002c28:	e853 3f00 	ldrex	r3, [r3]
 8002c2c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8002c2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c30:	f023 0301 	bic.w	r3, r3, #1
 8002c34:	663b      	str	r3, [r7, #96]	; 0x60
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	3308      	adds	r3, #8
 8002c3c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002c3e:	64ba      	str	r2, [r7, #72]	; 0x48
 8002c40:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c42:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8002c44:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002c46:	e841 2300 	strex	r3, r2, [r1]
 8002c4a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8002c4c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d1e5      	bne.n	8002c1e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	2220      	movs	r2, #32
 8002c56:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->RxState = HAL_UART_STATE_READY;
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	2220      	movs	r2, #32
 8002c5e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        __HAL_UNLOCK(huart);
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	2200      	movs	r2, #0
 8002c66:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

        return HAL_TIMEOUT;
 8002c6a:	2303      	movs	r3, #3
 8002c6c:	e069      	b.n	8002d42 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	f003 0304 	and.w	r3, r3, #4
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d051      	beq.n	8002d20 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	69db      	ldr	r3, [r3, #28]
 8002c82:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002c86:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002c8a:	d149      	bne.n	8002d20 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002c94:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c9e:	e853 3f00 	ldrex	r3, [r3]
 8002ca2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002ca4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ca6:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002caa:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	461a      	mov	r2, r3
 8002cb2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002cb4:	637b      	str	r3, [r7, #52]	; 0x34
 8002cb6:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002cb8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002cba:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002cbc:	e841 2300 	strex	r3, r2, [r1]
 8002cc0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8002cc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d1e6      	bne.n	8002c96 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	3308      	adds	r3, #8
 8002cce:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002cd0:	697b      	ldr	r3, [r7, #20]
 8002cd2:	e853 3f00 	ldrex	r3, [r3]
 8002cd6:	613b      	str	r3, [r7, #16]
   return(result);
 8002cd8:	693b      	ldr	r3, [r7, #16]
 8002cda:	f023 0301 	bic.w	r3, r3, #1
 8002cde:	66bb      	str	r3, [r7, #104]	; 0x68
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	3308      	adds	r3, #8
 8002ce6:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8002ce8:	623a      	str	r2, [r7, #32]
 8002cea:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002cec:	69f9      	ldr	r1, [r7, #28]
 8002cee:	6a3a      	ldr	r2, [r7, #32]
 8002cf0:	e841 2300 	strex	r3, r2, [r1]
 8002cf4:	61bb      	str	r3, [r7, #24]
   return(result);
 8002cf6:	69bb      	ldr	r3, [r7, #24]
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d1e5      	bne.n	8002cc8 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	2220      	movs	r2, #32
 8002d00:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->RxState = HAL_UART_STATE_READY;
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	2220      	movs	r2, #32
 8002d08:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	2220      	movs	r2, #32
 8002d10:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	2200      	movs	r2, #0
 8002d18:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8002d1c:	2303      	movs	r3, #3
 8002d1e:	e010      	b.n	8002d42 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	69da      	ldr	r2, [r3, #28]
 8002d26:	68bb      	ldr	r3, [r7, #8]
 8002d28:	4013      	ands	r3, r2
 8002d2a:	68ba      	ldr	r2, [r7, #8]
 8002d2c:	429a      	cmp	r2, r3
 8002d2e:	bf0c      	ite	eq
 8002d30:	2301      	moveq	r3, #1
 8002d32:	2300      	movne	r3, #0
 8002d34:	b2db      	uxtb	r3, r3
 8002d36:	461a      	mov	r2, r3
 8002d38:	79fb      	ldrb	r3, [r7, #7]
 8002d3a:	429a      	cmp	r2, r3
 8002d3c:	f43f af46 	beq.w	8002bcc <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002d40:	2300      	movs	r3, #0
}
 8002d42:	4618      	mov	r0, r3
 8002d44:	3770      	adds	r7, #112	; 0x70
 8002d46:	46bd      	mov	sp, r7
 8002d48:	bd80      	pop	{r7, pc}

08002d4a <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8002d4a:	b480      	push	{r7}
 8002d4c:	b085      	sub	sp, #20
 8002d4e:	af00      	add	r7, sp, #0
 8002d50:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8002d58:	2b01      	cmp	r3, #1
 8002d5a:	d101      	bne.n	8002d60 <HAL_UARTEx_DisableFifoMode+0x16>
 8002d5c:	2302      	movs	r3, #2
 8002d5e:	e027      	b.n	8002db0 <HAL_UARTEx_DisableFifoMode+0x66>
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	2201      	movs	r2, #1
 8002d64:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	2224      	movs	r2, #36	; 0x24
 8002d6c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	681a      	ldr	r2, [r3, #0]
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	f022 0201 	bic.w	r2, r2, #1
 8002d86:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8002d8e:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	2200      	movs	r2, #0
 8002d94:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	68fa      	ldr	r2, [r7, #12]
 8002d9c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	2220      	movs	r2, #32
 8002da2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	2200      	movs	r2, #0
 8002daa:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8002dae:	2300      	movs	r3, #0
}
 8002db0:	4618      	mov	r0, r3
 8002db2:	3714      	adds	r7, #20
 8002db4:	46bd      	mov	sp, r7
 8002db6:	bc80      	pop	{r7}
 8002db8:	4770      	bx	lr

08002dba <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8002dba:	b580      	push	{r7, lr}
 8002dbc:	b084      	sub	sp, #16
 8002dbe:	af00      	add	r7, sp, #0
 8002dc0:	6078      	str	r0, [r7, #4]
 8002dc2:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8002dca:	2b01      	cmp	r3, #1
 8002dcc:	d101      	bne.n	8002dd2 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8002dce:	2302      	movs	r3, #2
 8002dd0:	e02d      	b.n	8002e2e <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	2201      	movs	r2, #1
 8002dd6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	2224      	movs	r2, #36	; 0x24
 8002dde:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	681a      	ldr	r2, [r3, #0]
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	f022 0201 	bic.w	r2, r2, #1
 8002df8:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	689b      	ldr	r3, [r3, #8]
 8002e00:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	683a      	ldr	r2, [r7, #0]
 8002e0a:	430a      	orrs	r2, r1
 8002e0c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8002e0e:	6878      	ldr	r0, [r7, #4]
 8002e10:	f000 f850 	bl	8002eb4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	68fa      	ldr	r2, [r7, #12]
 8002e1a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	2220      	movs	r2, #32
 8002e20:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	2200      	movs	r2, #0
 8002e28:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8002e2c:	2300      	movs	r3, #0
}
 8002e2e:	4618      	mov	r0, r3
 8002e30:	3710      	adds	r7, #16
 8002e32:	46bd      	mov	sp, r7
 8002e34:	bd80      	pop	{r7, pc}

08002e36 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8002e36:	b580      	push	{r7, lr}
 8002e38:	b084      	sub	sp, #16
 8002e3a:	af00      	add	r7, sp, #0
 8002e3c:	6078      	str	r0, [r7, #4]
 8002e3e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8002e46:	2b01      	cmp	r3, #1
 8002e48:	d101      	bne.n	8002e4e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8002e4a:	2302      	movs	r3, #2
 8002e4c:	e02d      	b.n	8002eaa <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	2201      	movs	r2, #1
 8002e52:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	2224      	movs	r2, #36	; 0x24
 8002e5a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	681a      	ldr	r2, [r3, #0]
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	f022 0201 	bic.w	r2, r2, #1
 8002e74:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	689b      	ldr	r3, [r3, #8]
 8002e7c:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	683a      	ldr	r2, [r7, #0]
 8002e86:	430a      	orrs	r2, r1
 8002e88:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8002e8a:	6878      	ldr	r0, [r7, #4]
 8002e8c:	f000 f812 	bl	8002eb4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	68fa      	ldr	r2, [r7, #12]
 8002e96:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	2220      	movs	r2, #32
 8002e9c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	2200      	movs	r2, #0
 8002ea4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8002ea8:	2300      	movs	r3, #0
}
 8002eaa:	4618      	mov	r0, r3
 8002eac:	3710      	adds	r7, #16
 8002eae:	46bd      	mov	sp, r7
 8002eb0:	bd80      	pop	{r7, pc}
	...

08002eb4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8002eb4:	b480      	push	{r7}
 8002eb6:	b085      	sub	sp, #20
 8002eb8:	af00      	add	r7, sp, #0
 8002eba:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d108      	bne.n	8002ed6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	2201      	movs	r2, #1
 8002ec8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	2201      	movs	r2, #1
 8002ed0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8002ed4:	e031      	b.n	8002f3a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8002ed6:	2308      	movs	r3, #8
 8002ed8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8002eda:	2308      	movs	r3, #8
 8002edc:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	689b      	ldr	r3, [r3, #8]
 8002ee4:	0e5b      	lsrs	r3, r3, #25
 8002ee6:	b2db      	uxtb	r3, r3
 8002ee8:	f003 0307 	and.w	r3, r3, #7
 8002eec:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	689b      	ldr	r3, [r3, #8]
 8002ef4:	0f5b      	lsrs	r3, r3, #29
 8002ef6:	b2db      	uxtb	r3, r3
 8002ef8:	f003 0307 	and.w	r3, r3, #7
 8002efc:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8002efe:	7bbb      	ldrb	r3, [r7, #14]
 8002f00:	7b3a      	ldrb	r2, [r7, #12]
 8002f02:	4910      	ldr	r1, [pc, #64]	; (8002f44 <UARTEx_SetNbDataToProcess+0x90>)
 8002f04:	5c8a      	ldrb	r2, [r1, r2]
 8002f06:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8002f0a:	7b3a      	ldrb	r2, [r7, #12]
 8002f0c:	490e      	ldr	r1, [pc, #56]	; (8002f48 <UARTEx_SetNbDataToProcess+0x94>)
 8002f0e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8002f10:	fb93 f3f2 	sdiv	r3, r3, r2
 8002f14:	b29a      	uxth	r2, r3
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8002f1c:	7bfb      	ldrb	r3, [r7, #15]
 8002f1e:	7b7a      	ldrb	r2, [r7, #13]
 8002f20:	4908      	ldr	r1, [pc, #32]	; (8002f44 <UARTEx_SetNbDataToProcess+0x90>)
 8002f22:	5c8a      	ldrb	r2, [r1, r2]
 8002f24:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8002f28:	7b7a      	ldrb	r2, [r7, #13]
 8002f2a:	4907      	ldr	r1, [pc, #28]	; (8002f48 <UARTEx_SetNbDataToProcess+0x94>)
 8002f2c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8002f2e:	fb93 f3f2 	sdiv	r3, r3, r2
 8002f32:	b29a      	uxth	r2, r3
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8002f3a:	bf00      	nop
 8002f3c:	3714      	adds	r7, #20
 8002f3e:	46bd      	mov	sp, r7
 8002f40:	bc80      	pop	{r7}
 8002f42:	4770      	bx	lr
 8002f44:	08003090 	.word	0x08003090
 8002f48:	08003098 	.word	0x08003098

08002f4c <__libc_init_array>:
 8002f4c:	b570      	push	{r4, r5, r6, lr}
 8002f4e:	4d0d      	ldr	r5, [pc, #52]	; (8002f84 <__libc_init_array+0x38>)
 8002f50:	4c0d      	ldr	r4, [pc, #52]	; (8002f88 <__libc_init_array+0x3c>)
 8002f52:	1b64      	subs	r4, r4, r5
 8002f54:	10a4      	asrs	r4, r4, #2
 8002f56:	2600      	movs	r6, #0
 8002f58:	42a6      	cmp	r6, r4
 8002f5a:	d109      	bne.n	8002f70 <__libc_init_array+0x24>
 8002f5c:	4d0b      	ldr	r5, [pc, #44]	; (8002f8c <__libc_init_array+0x40>)
 8002f5e:	4c0c      	ldr	r4, [pc, #48]	; (8002f90 <__libc_init_array+0x44>)
 8002f60:	f000 f820 	bl	8002fa4 <_init>
 8002f64:	1b64      	subs	r4, r4, r5
 8002f66:	10a4      	asrs	r4, r4, #2
 8002f68:	2600      	movs	r6, #0
 8002f6a:	42a6      	cmp	r6, r4
 8002f6c:	d105      	bne.n	8002f7a <__libc_init_array+0x2e>
 8002f6e:	bd70      	pop	{r4, r5, r6, pc}
 8002f70:	f855 3b04 	ldr.w	r3, [r5], #4
 8002f74:	4798      	blx	r3
 8002f76:	3601      	adds	r6, #1
 8002f78:	e7ee      	b.n	8002f58 <__libc_init_array+0xc>
 8002f7a:	f855 3b04 	ldr.w	r3, [r5], #4
 8002f7e:	4798      	blx	r3
 8002f80:	3601      	adds	r6, #1
 8002f82:	e7f2      	b.n	8002f6a <__libc_init_array+0x1e>
 8002f84:	080030a8 	.word	0x080030a8
 8002f88:	080030a8 	.word	0x080030a8
 8002f8c:	080030a8 	.word	0x080030a8
 8002f90:	080030ac 	.word	0x080030ac

08002f94 <memset>:
 8002f94:	4402      	add	r2, r0
 8002f96:	4603      	mov	r3, r0
 8002f98:	4293      	cmp	r3, r2
 8002f9a:	d100      	bne.n	8002f9e <memset+0xa>
 8002f9c:	4770      	bx	lr
 8002f9e:	f803 1b01 	strb.w	r1, [r3], #1
 8002fa2:	e7f9      	b.n	8002f98 <memset+0x4>

08002fa4 <_init>:
 8002fa4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002fa6:	bf00      	nop
 8002fa8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002faa:	bc08      	pop	{r3}
 8002fac:	469e      	mov	lr, r3
 8002fae:	4770      	bx	lr

08002fb0 <_fini>:
 8002fb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002fb2:	bf00      	nop
 8002fb4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002fb6:	bc08      	pop	{r3}
 8002fb8:	469e      	mov	lr, r3
 8002fba:	4770      	bx	lr
